<html><head><title>ProfessorJ Advanced Language</title><h1>ProfessorJ Advanced Language</h1></head><body><p><ul><li><b>PROGRAM</b><ul><li><b>IMPORT</b> ... <b>DEF</b> ... </li><li><a href="package.html"><code class="scheme"><span class="keyword">package</span></code> <b>QUALIFIED_NAME</b>; <b>IMPORT</b> ... <b>DEF</b> ... </a></li></ul></li><li><b>IMPORT</b><ul><li><a href="import.html"><code class="scheme"><span class="keyword">import</span></code> <b>QUALIFIED_NAME</b> ;</a></li><li><a href="import.html"><code class="scheme"><span class="keyword">import</span></code> <b>QUALIFIED_NAME</b> .*;</a></li></ul></li><li><b>DEF</b><ul><li><b>CLASS-DEF</b></li><li><code class="scheme"><span class="keyword">public</span></code> <b>CLASS-DEF</b></li><li><b>INTERFACE-DEF</b></li><li><code class="scheme"><span class="keyword">public</span></code> <b>INTERFACE-DEF</b></li></ul></li><li><b>CLASS-DEF</b><ul><li><a href="class.html"><code class="scheme"><span class="keyword">class</span></code> <b>NAME</b> { <b>MEMBER</b> ... }</a></li><li><a href="class.html"><code class="scheme"><span class="keyword">class</span></code> <b>NAME</b> <code class="scheme"><span class="keyword">extends</span></code> <b>NAME</b> { <b>MEMBER</b> ... }</a></li><li><a href="class.html"><code class="scheme"><span class="keyword">abstract</span></code> <code class="scheme"><span class="keyword">class</span></code> <b>NAME</b> { <b>MEMBER</b> ... }</a></li><li><a href="class.html"><code class="scheme"><span class="keyword">abstract</span></code> <code class="scheme"><span class="keyword">class</span></code> <b>NAME</b> <code class="scheme"><span class="keyword">extends</span></code> <b>NAME</b> { <b>MEMBER</b> ... }</a></li><li><a href="class.html"><code class="scheme"><span class="keyword">class</span></code> <b>NAME</b> <code class="scheme"><span class="keyword">implements</span></code> <b>NAME</b>, <b>NAME</b> ... { <b>MEMBER</b> ... }</a></li><li><a href="class.html"><code class="scheme"><span class="keyword">class</span></code> <b>NAME</b> <code class="scheme"><span class="keyword">extends</span></code> <b>NAME</b>  <code class="scheme"><span class="keyword">implements</span></code> <b>NAME</b>, <b>NAME</b> ... { <b>MEMBER</b> ... }</a></li><li><a href="class.html"><code class="scheme"><span class="keyword">abstract</span></code> <code class="scheme"><span class="keyword">class</span></code> <b>NAME</b>  <code class="scheme"><span class="keyword">implements</span></code> <b>NAME</b>, <b>NAME</b> ... { <b>MEMBER</b> ... }</a></li><li><a href="class.html"><code class="scheme"><span class="keyword">abstract</span></code> <code class="scheme"><span class="keyword">class</span></code> <b>NAME</b> <code class="scheme"><span class="keyword">extends</span></code> <b>NAME</b>  <code class="scheme"><span class="keyword">implements</span></code> <b>NAME</b>, <b>NAME</b> ... { <b>MEMBER</b> ... }</a></li></ul></li><li><b>INTERFACE-DEF</b><ul><li><a href="interface.html"><code class="scheme"><span class="keyword">interface</span></code> <b>NAME</b>  { <b>METHOD-DECL</b> ... }</a></li><li><a href="interface.html"><code class="scheme"><span class="keyword">interface</span></code> <b>NAME</b> <code class="scheme"><span class="keyword">extends</span></code> <b>NAME</b> , <b>NAME</b> ... { <b>METHOD-DECL</b> ... }</a></li></ul></li><li><b>MEMBER</b><ul><li><b>CONSTRUCTOR</b></li><li><b>MODIFIER</b> <b>CONSTRUCTOR</b></li><li><b>METHOD</b></li><li><b>MODIFIER</b> <b>METHOD</b></li><li><b>FIELD</b></li><li><b>MODIFIER</b> <b>FIELD</b></li><li>{ <b>STATEMENT</b> ... }</li></ul></li><li><b>CONSTRUCTOR</b><ul><li><a href="constructor.html"><b>NAME</b> (<b>TYPE</b> <b>NAME</b>, ...) { <b>STATEMENT</b> ...} </a></li></ul></li><li><b>METHOD</b><ul><li><a href="method.html"><b>METHOD-RETURN</b> <b>NAME</b>  (<b>TYPE</b> <b>NAME</b>, ...) { <b>STATEMENT</b> ... }</a></li><li><a href="method.html"><code class="scheme"><span class="keyword">abstract</span></code> <b>METHOD-RETURN</b> <b>NAME</b>  (<b>TYPE</b> <b>NAME</b>, ...); </a></li><li><a href="method.html"><code class="scheme"><span class="keyword">final</span></code> <b>METHOD-RETURN</b> <b>NAME</b>  (<b>TYPE</b> <b>NAME</b>, ...) { <b>STATEMENT</b> ... } </a></li><li><a href="method.html"><code class="scheme"><span class="keyword">static</span></code> <b>METHOD-RETURN</b> <b>NAME</b>  (<b>TYPE</b> <b>NAME</b>, ...) { <b>STATEMENT</b> ... } </a></li></ul></li><li><b>METHOD-RETURN</b><ul><li><a href="void.html"><code class="scheme"><span class="keyword">void</span></code></a></li><li><a href="type.html"><b>TYPE</b></a></li></ul></li><li><b>FIELD</b><ul><li><a href="field.html"><b>TYPE</b> <b>DECL-INIT</b> , <b>DECL-INIT </b> ...;</a></li><li><a href="field.html"><code class="scheme"><span class="keyword">static</span></code> <b>TYPE</b> <b>DECL-INIT</b> , <b>DECL-INIT</b> ...;</a></li></ul></li><li><b>DECL-INIT</b><ul><li><a href="declaration.html"><b>NAME</b></a></li><li><a href="init.html"><b>NAME</b><code class="scheme"><span class="keyword">=</span></code> <b>EXPRESSION</b></a></li><li><a href="init.html"><b>NAME</b><code class="scheme"><span class="keyword">=</span></code> <b>ARRAY-INIT</b></a></li></ul></li><li><b>ARRAY-INIT</b><ul><li><a href="array-init.html"><code class="scheme"><span class="keyword">{</span></code><b>ARRAY-INIT</b>, ...<code class="scheme"><span class="keyword">}</span></code></a></li><li><a href="array-init.html"><code class="scheme"><span class="keyword">{</span></code><b>EXPRESSION</b>, ...<code class="scheme"><span class="keyword">}</span></code></a></li></ul></li><li><b>METHOD-DECL</b><ul><li><a href="method-decl.html"><code class="scheme"><span class="keyword">abstract</span></code> <b>METHOD-RETURN</b> <b>NAME</b>  (<b>TYPE</b> <b>NAME</b>, ...); </a></li><li><a href="method-decl.html"><b>METHOD-RETURN</b><b>NAME</b> (<b>TYPE</b> <b>NAME</b> ...); </a></li></ul></li><li><b>STATEMENT</b><ul><li><a href="assignment.html"><b>EXPRESSION</b> <code class="scheme"><span class="keyword">=</span></code> <b>EXPRESSION</b>;</a></li><li><a href="if.html"><code class="scheme"><span class="keyword">if</span></code> (<b>EXPRESSION</b>) <b>STATEMENT</b>  <code class="scheme"><span class="keyword">else</span></code> <b>STATEMENT</b></a></li><li><a href="if.html"><code class="scheme"><span class="keyword">if</span></code> (<b>EXPRESSION</b>) <b>STATEMENT</b></a></li><li><a href="return.html"><code class="scheme"><span class="keyword">return</span></code> <b>EXPRESSION</b>;</a></li><li><a href="return.html"><code class="scheme"><span class="keyword">return</span></code> ;</a></li><li><a href="block.html">{<b>STATEMENT</b> ...}</a></li><li><a href="while.html"><code class="scheme"><span class="keyword">while</span></code> (<b>EXPRESSION</b>) <b>STATEMENT</b></a></li><li><a href="do.html"><code class="scheme"><span class="keyword">do</span></code> <b>STATEMENT</b> <code class="scheme"><span class="keyword">while</span></code> (<b>EXPRESSION</b>);</a></li><li><a href="for.html"><code class="scheme"><span class="keyword">for</span></code> (<b>FOR-INIT</b> ; <b>EXPRESSION</b> ; <b>STATEMENT-EXPRESSION </b>, <b>STATEMENT-EXPRESSION</b> ...)  <b>STATEMENT</b> </a></li><li><a href="for.html"><code class="scheme"><span class="keyword">for</span></code>( ; ; )<b>STATEMENT</b></a></li><li><a href="break.html"><code class="scheme"><span class="keyword">break;</span></code></a></li><li><a href="continue.html"><code class="scheme"><span class="keyword">continue;</span></code></a></li><li><a href="super.html"><code class="scheme"><span class="keyword">super</span></code>( <b>EXPRESSION</b> ... );</a></li><li><a href="this.html"><code class="scheme"><span class="keyword">this</span></code>(<b>EXPRESSION</b> ... );</a></li><li><a href="local-variable.html"><b>TYPE</b> <b>DECL-INIT</b> , <b>DECL-INIT </b> ...;</a></li><li><b>STATEMENT-EXPRESSION</b>;</li></ul></li><li><b>FOR-INIT</b><ul><li><a href="local-variable.html"><b>TYPE</b> <b>DECL-INIT</b> , <b>DECL-INIT </b> ...;</a></li><li><b>STATEMENT-EXPRESSION</b>, <b>STATEMENT-EXPRESSION</b> ... </li></ul></li><li><b>STATEMENT-EXPRESSION</b><ul><li><a href="call.html"><b>NAME</b>( <b>EXPRESSION</b>, ...)</a></li><li><a href="call.html"><b>EXPRESSION</b><code class="scheme"><span class="keyword">.</span></code><b>NAME</b>( <b>EXPRESSION</b>, ...)</a></li><li><a href="call.html"><code class="scheme"><span class="keyword">super.</span></code><b>NAME</b>( <b>EXPRESSION</b>, ...)</a></li><li><a href="call.html"><b>NAME</b>.<b>NAME</b>( <b>EXPRESSION</b>, ...)</a></li><li><a href="4343.html"><b>EXPRESSION</b><code class="scheme"><span class="keyword">++</span></code></a></li><li><a href="4343.html"><code class="scheme"><span class="keyword">++</span></code><b>EXPRESSION</b></a></li><li><a href="--.html"><b>EXPRESSION</b><code class="scheme"><span class="keyword">--</span></code></a></li><li><a href="--.html"><code class="scheme"><span class="keyword">--</span></code><b>EXPRESSION</b></a></li></ul></li><li><b>EXPRESSION</b><ul><li><a href="binary-operation.html"><b>EXPRESSION</b> <b>OP</b> <b>EXPRESSION</b></a></li><li><a href="unary.html"><code class="scheme"><span class="keyword">-</span></code><b>EXPRESSION</b></a></li><li><a href="unary.html"><code class="scheme"><span class="keyword">+</span></code><b>EXPRESSION</b></a></li><li><a href="4343.html"><b>EXPRESSION</b><code class="scheme"><span class="keyword">++</span></code></a></li><li><a href="4343.html"><code class="scheme"><span class="keyword">++</span></code><b>EXPRESSION</b></a></li><li><a href="--.html"><b>EXPRESSION</b><code class="scheme"><span class="keyword">--</span></code></a></li><li><a href="--.html"><code class="scheme"><span class="keyword">--</span></code><b>EXPRESSION</b></a></li><li><a href="and.html"><b>EXPRESSION</b> <code class="scheme"><span class="keyword">&amp;&amp;</span></code> <b>EXPRESSION</b></a></li><li><a href="or.html"><b>EXPRESSION</b> <code class="scheme"><span class="keyword">||</span></code> <b>EXPRESSION</b></a></li><li><a href="not.html"><code class="scheme"><span class="keyword">!</span></code><b>EXPRESSION</b></a></li><li><a href="this.html"><code class="scheme"><span class="keyword">this</span></code></a></li><li><a href="call.html"><b>NAME</b>( <b>EXPRESSION</b>, ...)</a></li><li><a href="call.html"><b>EXPRESSION</b><code class="scheme"><span class="keyword">.</span></code><b>NAME</b>( <b>EXPRESSION</b>, ...)</a></li><li><a href="call.html"><code class="scheme"><span class="keyword">super.</span></code><b>NAME</b>( <b>EXPRESSION</b> ...)</a></li><li><a href="call.html"><b>NAME</b>.<b>NAME</b>( <b>EXPRESSION</b>, ...)</a></li><li><a href="field-access.html"><b>EXPRESSION</b><code class="scheme"><span class="keyword">.</span></code><b>NAME</b></a></li><li><a href="field-access.html"><b>NAME</b><code class="scheme"><span class="keyword">.</span></code><b>NAME</b></a></li><li><a href="array-access.html"><b>EXPRESSION</b><code class="scheme"><span class="keyword">[</span></code><b>EXPRESSION</b><code class="scheme"><span class="keyword">]</span></code> <code class="scheme"><span class="keyword">[</span></code><b>EXPRESSION</b><code class="scheme"><span class="keyword">]</span></code> ...</a></li><li><a href="new.html"><code class="scheme"><span class="keyword">new</span></code> <b>NAME</b>( <b>EXPRESSION</b> ...)</a></li><li><a href="array-instantiation.html"><code class="scheme"><span class="keyword">new</span></code> <b>TYPE</b><code class="scheme"><span class="keyword">[</span></code><b>EXPRESSION</b><code class="scheme"><span class="keyword">]</span></code> <code class="scheme"><span class="keyword">[</span></code><b>EXPRESSION</b><code class="scheme"><span class="keyword">]</span></code> ...</a></li><li><a href="cast.html">(<b>TYPE</b>) <b>EXPRESSION</b></a></li><li><a href="instanceof.html"><b>EXPRESSION</b> <code class="scheme"><span class="keyword">instanceof</span></code> <b>TYPE</b></a></li><li><a href="63.html"><b>EXPRESSION</b> <code class="scheme"><span class="keyword">?</span></code> <b>EXPRESSION</b> <code class="scheme"><span class="keyword">:</span></code> <b>EXPRESSION</b></a></li><li><a href="parenthesised.html">(<b>EXPRESSION</b>)</a></li><li><a href="variable.html"><b>NAME</b></a></li><li><a href="number.html">NUMBER</a></li><li><a href="char.html">CHARACTER</a></li><li><a href="boolean.html"><code class="scheme"><span class="keyword">true</span></code></a></li><li><a href="boolean.html"><code class="scheme"><span class="keyword">false</span></code></a></li><li><a href="string.html">STRING</a></li></ul></li><li><b>QUALIFIED-NAME</b><ul><li><b>NAME</b><code class="scheme"><span class="keyword">.</span></code> ...<b>NAME</b></li></ul></li><li><b>NAME</b><ul><li><a href="name.html">a sequence of keyboard characters not including certain characters and not forbidden to use as a name</a></li></ul></li><li><b>TYPE</b><ul><li><a href="type.html">prim-type</a></li><li><a href="type.html"><b>NAME</b></a></li><li><a href="type.html"><b>TYPE</b><code class="scheme"><span class="keyword">[]</span></code></a></li></ul></li><li><b>MODIFIER</b><ul><li><a href="public.html"><code class="scheme"><span class="keyword">public</span></code></a></li><li><a href="protected.html"><code class="scheme"><span class="keyword">protected</span></code></a></li><li><a href="private.html"><code class="scheme"><span class="keyword">private</span></code></a></li></ul></li><li><b>OP</b><ul><li><code class="scheme"><span class="keyword">+, -, *, /</span></code></li><li><code class="scheme"><span class="keyword">&lt;, &lt;=, ==, &gt;, &gt;=</span></code></li></ul></li><hr /></ul></p></body></html>