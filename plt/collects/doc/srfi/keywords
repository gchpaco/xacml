(
("cons" "cons a d -> pair" "srfi-1.html" "cons" "Constructors")
("list" "list object ... -> list" "srfi-1.html" "list" "Constructors")
("xcons" "xcons d a -> pair" "srfi-1.html" "xcons" "Constructors")
("cons*" "cons* elt1 elt2 ... -> object" "srfi-1.html" "cons*" "Constructors")
("make-list" "make-list n [fill] -> list" "srfi-1.html" "make-list" "Constructors")
("list-tabulate" "list-tabulate n init-proc -> list" "srfi-1.html" "list-tabulate" "Constructors")
("list-copy" "list-copy flist -> flist" "srfi-1.html" "list-copy" "Constructors")
("circular-list" "circular-list elt1 elt2 ... -> list" "srfi-1.html" "circular-list" "Constructors")
("iota" "iota count [start step] -> list" "srfi-1.html" "iota" "Constructors")
("pair?" "pair? object -> boolean" "srfi-1.html" "pair-p" "Predicates")
("null?" "null? object -> boolean" "srfi-1.html" "null-p" "Predicates")
("proper-list?" "proper-list? x -> boolean" "srfi-1.html" "proper-list-p" "Predicates")
("circular-list?" "circular-list? x -> boolean" "srfi-1.html" "circular-list-p" "Predicates")
("dotted-list?" "dotted-list? x -> boolean" "srfi-1.html" "dotted-list-p" "Predicates")
("not-pair?" "not-pair? x -> boolean" "srfi-1.html" "not-pair-p" "Predicates")
("null-list?" "null-list? list -> boolean" "srfi-1.html" "null-list-p" "Predicates")
("car" "car pair -> value" "srfi-1.html" "car" "Selectors")
("cdr" "cdr pair -> value" "srfi-1.html" "cdr" "Selectors")
("cddadr" "cddadr pair -> value" "srfi-1.html" "cddadr" "Selectors")
("cddddr" "cddddr pair -> value" "srfi-1.html" "cddddr" "Selectors")
("list-ref" "list-ref clist i -> value" "srfi-1.html" "list-ref" "Selectors")
("first" "first   pair -> object" "srfi-1.html" "first" "Selectors")
("second" "second  pair -> object" "srfi-1.html" "second" "Selectors")
("third" "third   pair -> object" "srfi-1.html" "third" "Selectors")
("fourth" "fourth  pair -> object" "srfi-1.html" "fourth" "Selectors")
("fifth" "fifth   pair -> object" "srfi-1.html" "fifth" "Selectors")
("sixth" "sixth   pair -> object" "srfi-1.html" "sixth" "Selectors")
("seventh" "seventh pair -> object" "srfi-1.html" "seventh" "Selectors")
("eighth" "eighth  pair -> object" "srfi-1.html" "eighth" "Selectors")
("ninth" "ninth   pair -> object" "srfi-1.html" "ninth" "Selectors")
("tenth" "tenth   pair -> object" "srfi-1.html" "tenth" "Selectors")
("car+cdr" "car+cdr pair -> [x y]" "srfi-1.html" "car+cdr" "Selectors")
("take" "take x i -> list" "srfi-1.html" "take" "Selectors")
("drop" "drop x i -> object" "srfi-1.html" "drop" "Selectors")
("take-right" "take-right flist i -> object" "srfi-1.html" "take-right" "Selectors")
("drop-right" "drop-right flist i -> list" "srfi-1.html" "drop-right" "Selectors")
("take!" "take! x  i -> list" "srfi-1.html" "take!" "Selectors")
("drop-right!" "drop-right! flist i -> list" "srfi-1.html" "drop-right!" "Selectors")
("split-at" "split-at x i -> [list object]" "srfi-1.html" "split-at" "Selectors")
("split-at!" "split-at! x i -> [list object]" "srfi-1.html" "split-at!" "Selectors")
("last" "last pair -> object" "srfi-1.html" "last" "Selectors")
("last-pair" "last-pair pair -> pair" "srfi-1.html" "last-pair" "Selectors")
("length" "length  list -> integer" "srfi-1.html" "length" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("length+" "length+ clist -> integer or #f" "srfi-1.html" "length+" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("append" "append list1 ... -> list" "srfi-1.html" "append" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("append!" "append! list1 ... -> list" "srfi-1.html" "append!" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("concatenate" "concatenate list-of-lists -> value" "srfi-1.html" "concatenate" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("concatenate!" "concatenate! list-of-lists -> value" "srfi-1.html" "concatenate!" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("reverse" "reverse list -> list" "srfi-1.html" "reverse" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("reverse!" "reverse! list -> list" "reverse!" "srfi-1.html" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("append-reverse" "append-reverse  rev-head tail -> list" "srfi-1.html" "append-reverse" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("append-reverse!" "append-reverse! rev-head tail -> list" "srfi-1.html" "append-reverse!" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("zip" "zip clist1 clist2 ... -> list" "srfi-1.html" "zip" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("unzip1" "unzip1 list -> list" "srfi-1.html" "unzip1" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("unzip2" "unzip2 list -> [list list]" "srfi-1.html" "unzip2" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("unzip3" "unzip3 list -> [list list list]" "srfi-1.html" "unzip3" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("unzip4" "unzip4 list -> [list list list list]" "srfi-1.html" "unzip4" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("unzip5" "unzip5 list -> [list list list list list]" "srfi-1.html" "unzip5" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("count" "count pred clist1 clist2 -> integer" "srfi-1.html" "count" "Miscellaneous: length, append, concatenate, reverse, zip & count")
("fold" "fold kons knil clist1 clist2 ... -> value" "srfi-1.html" "fold" "Fold, unfold & map")
("fold-right" "fold-right kons knil clist1 clist2 ... -> value" "srfi-1.html" "fold-right" "Fold, unfold & map")
("pair-fold" "pair-fold kons knil clist1 clist2 ... -> value" "srfi-1.html" "pair-fold" "Fold, unfold & map")
("pair-fold-right" "pair-fold-right kons knil clist1 clist2 ... -> value" "srfi-1.html" "pair-fold-right" "Fold, unfold & map")
("reduce" "reduce f ridentity list -> valuesig" "srfi-1.html" "reduce" "Fold, unfold & map")
("reduce-right" "reduce-right f ridentity list -> value" "srfi-1.html" "reduce-right" "Fold, unfold & map")
("unfold" "unfold p f g seed [tail-gen] -> list" "srfi-1.html" "unfold" "Fold, unfold & map")
("map" "map proc clist1 clist2 ... -> list" "srfi-1.html" "map" "Fold, unfold & map")
("for-each" "for-each proc clist1 clist2 ... -> unspecified" "for-each" "srfi-1.html" "Fold, unfold & map")
("append-map" "append-map  f clist1 clist2 ... -> value" "srfi-1.html" "append-map" "Fold, unfold & map")
("append-map!" "append-map! f clist1 clist2 ... -> value" "srfi-1.html" "append-map!" "Fold, unfold & map")
("map!" "map! f list1 clist2 ... -> list" "srfi-1.html" "map!" "Fold, unfold & map")
("map-in-order" "map-in-order f clist1 clist2 ... -> list" "srfi-1.html" "map-in-order" "Fold, unfold & map")
("pair-for-each" "pair-for-each f clist1 clist2 ... -> unspecific" "srfi-1.html" "pair-for-each" "Fold, unfold & map")
("filter-map" "filter-map f clist1 clist2 ... -> list" "srfi-1.html" "filter-map" "Fold, unfold & map")
("filter" "filter pred list -> list" "srfi-1.html" "filter" "Filtering & partitioning")
("filter!" "filter! pred list -> list" "srfi-1.html" "filter!" "Filtering & partitioning")
("partition!" "partition! pred list -> [list list]" "srfi-1.html" "partition!" "Filtering & partitioning")
("remove!" "remove!    pred list -> list" "srfi-1.html" "remove!" "Filtering & partitioning")
("remove" "remove pred list -> list" "srfi-1.html" "remove" "Filtering & partitioning")
("partition" "partition pred list -> [list list]" "srfi-1.html" "partition" "Filtering & partitioning")
("find" "find pred clist -> value" "srfi-1.html" "find" "Searching")
("find-tail" "find-tail pred clist -> pair or false" "srfi-1.html" "find-tail" "Searching")
("take-while" "take-while pred clist -> list" "srfi-1.html" "take-while" "Searching")
("take-while!" "take-while! pred clist -> list" "srfi-1.html" "take-while!" "Searching")
("drop-while" "drop-while pred clist -> list" "srfi-1.html" "drop-while" "Searching")
("span" "span  pred clist -> [list clist]" "srfi-1.html" "span" "Searching")
("span!" "span! pred list -> [list list]" "srfi-1.html" "span!" "Searching")
("break" "break pred clist -> [list clist]" "srfi-1.html" "break" "Searching")
("break!" "break! pred list -> [list list]" "srfi-1.html" "break!" "Searching")
("any" "any pred clist1 clist2 ... -> value" "srfi-1.html" "any" "Searching")
("every" "every pred clist1 clist2 ... -> value" "srfi-1.html" "every" "Searching")
("list-index" "list-index pred clist1 clist2 ... -> integer or false" "srfi-1.html" "list-index" "Searching")
("member" "member x list [=] -> list" "srfi-1.html" "member" "Searching")
("memq" "memq x list -> list" "srfi-1.html" "memq" "Searching")
("memv" "memv x list -> list" "srfi-1.html" "memv" "Searching")
("delete" "delete  x list [=] -> list" "srfi-1.html" "delete" "Deleting")
("delete-duplicates" "delete-duplicates  list [=] -> list" "srfi-1.html" "delete-duplicates" "Deleting")
("delete!" "delete!  x list [=] -> list" "srfi-1.html" "delete!" "Deleting")
("delete-duplicates!" "delete-duplicates! list [=] -> list" "srfi-1.html" "delete-duplicates!" "Deleting")
("assoc" "assoc key alist [=] -> pair or #f" "srfi-1.html" "assoc" "Association lists")
("assq" "assq key alist -> pair or #f" "srfi-1.html" "assq" "Association lists")
("assv" "assv key alist -> pair or #f" "srfi-1.html" "assv" "Association lists")
("alist-cons" "alist-cons key datum alist -> alist" "srfi-1.html" "alist-cons" "Association lists")
("alist-copy" "alist-copy alist -> alist" "srfi-1.html" "alist-copy" "Association lists")
("alist-delete" "alist-delete  key alist [=] -> alist" "srfi-1.html" "alist-delete" "Association lists")
("alist-delete!" "alist-delete! key alist [=] -> alist" "srfi-1.html" "alist-delete!" "Association lists")
("lset" "lset<= = list1 ... -> boolean" "srfi-1.html" "lset" "Set operations on lists")
("lset=" "lset= = list1 list2 ... -> boolean" "srfi-1.html" "lset=" "Set operations on lists")
("lset-adjoin" "lset-adjoin = list elt1 ... -> list" "srfi-1.html" "lset-adjoin" "Set operations on lists")
("lset-union" "lset-union = list1 ... -> list" "srfi-1.html" "lset-union" "Set operations on lists")
("lset-intersection" "lset-intersection = list1 list2 ... -> list" "srfi-1.html" "lset-intersection" "Set operations on lists")
("lset-intersection!" "lset-intersection!      = list1 list2 ... -> list" "srfi-1.html" "lset-intersection!" "Set operations on lists")
("lset-union!" "lset-union! = list1 ... -> list" "srfi-1.html" "lset-union!" "Set operations on lists")
("lset-difference!" "lset-difference!        = list1 list2 ... -> list" "srfi-1.html" "lset-difference!" "Set operations on lists")
("lset-xor!" "lset-xor!               = list1 ... -> list" "srfi-1.html" "lset-xor!" "Set operations on lists")
("lset-diff+intersection!" "lset-diff+intersection! = list1 list2 ... -> [list list]" "srfi-1.html" "lset-diff+intersection!" "Set operations on lists")
("lset-difference" "lset-difference = list1 list2 ... -> list" "srfi-1.html" "lset-difference" "Set operations on lists")
("lset-xor" "lset-xor = list1 ... -> list" "srfi-1.html" "lset-xor" "Set operations on lists")
("lset-diff+intersection" "lset-diff+intersection = list1 list2 ... -> [list list]" "srfi-1.html" "lset-diff+intersection" "Set operations on lists")
("set-car!" "set-car! pair object -> unspecified" "srfi-1.html" "set-car!" "Primitive side-effects")
("set-cdr!" "set-cdr! pair object -> unspecified" "srfi-1.html" "set-cdr!" "Primitive side-effects")
("and-let*" "and-let* (claws) body" "srfi-2.html" "and-let" "Syntax and Informal Semantics (SRFI-2)")
("s8vector" "(s8vector s8value ...)" "srfi-4.html" "s8vector" "Specification (datatypes)")
("u8vector" "(u8vector u8value ...)" "srfi-4.html" "s8vector" "Specification (datatypes)")
("s16vector" "(s16vector s16value ...)" "srfi-4.html" "s8vector" "Specification (SRFI-4 datatypes)")
("u16vector" "(u16vector u16value ...)" "srfi-4.html" "u8vector" "Specification (SRFI-4 datatypes)")
("s32vector" "(s32vector s32value ...)" "srfi-4.html" "s16vector" "Specification (SRFI-4 datatypes)")
("u32vector" "(u32vector u32value ...)" "srfi-4.html" "u16vector" "Specification (SRFI-4 datatypes)")
("s64vector" "(s64vector s64value ...)" "srfi-4.html" "s64vector" "Specification (SRFI-4 datatypes)")
("u64vector" "(u64vector u64value ...)" "srfi-4.html" "u64vector" "Specification (SRFI-4 datatypes)")
("f32vector" "(f32vector f32value ...)" "srfi-4.html" "f32vector" "Specification (SRFI-4 datatypes)")
("f64vector" "(f64vector f64value ...)" "srfi-4.html" "f64vector" "Specification (SRFI-4 datatypes)")
("let" "(let ((parameter argument) ...) body ...)" "srfi-5.html" "unnamed" "Specification (SRFI-5)")
("let" "(let name ((parameter argument) ...) body ...)" "srfi-5.html" "named-non-sig" "Specification (SRFI-5)")
("let" "(let (name (parameter argument) ...) body ...)" "srfi-5.html" "named-sig" "Specification (SRFI-5)")
("let" "(let name ((parameter argument) ... . (rest-parameter rest-argument ...)) body ...)" "srfi-5.html" "named-non-sig-rest" "Specification (SRFI-5)")
("let" "(let (name (parameter argument) ... . (rest-parameter rest-argument ...)) body ...)" "srfi-5.html" "name-sig-rest" "Specification (SRFI-5)")
("open-input-string" "(open-input-string string)" "srfi-6.html" "open-input-string" "Specification (SRFI-6)")
("open-output-string" "(open-output-string)" "srfi-6.html" "open-output-string" "Specification (SRFI-6)")
("get-output-string" "(get-output-string output-port)" "srfi-6.html" "get-output-string" "Specification (SRFI-6)")
("program" "(program <program clause>+)" "srfi-7.html" "program" "Specification (SRFI-7)")
("requires" "(requires <feature identifier>+)" "srfi-7.html" "requires" "Specification (SRFI-7)")
("files" "(files <filename>*)" "srfi-7.html" "files" "Specification (SRFI-7)")
("code" "(files <filename>*)" "srfi-7.html" "code" "Specification (SRFI-7)")
("feature-cond" "(feature-cond <feature-cond clause>+)" "srfi-7.html" "feature-cond" "Specification (SRFI-7)")
("feature-cond" "(feature-cond <feature-cond clause>* (else <program clause>+))" "srfi-7.html" "feature-cond" "Specification (SRFI-7)")
("and" "(and <feature requirement>*)" "srfi-7.html" "and" "Specification (SRFI-7)")
("or" "(or <feature requirement>*)" "srfi-7.html" "or" "Specification (SRFI-7)")
("not" "(not <feature requirement>)" "srfi-7.html" "not" "Specification (SRFI-7)")
("receive" "(receive <formals> <expression> <body>)" "srfi-8.html" "receive" "Specification (SRFI-8)")
("define-record-type" "(define-record-type <type name> (<constructor name> <field tag> ...) <predicate name> <field spec> ...)" "srfi-9.html" "define-record-type" "Specification (SRFI 9)")
("let-values" "(let-values ((formals expresion) ...) body)" "srfi-11.html" "let-values" "Specification (SRFI 11)")
("let*-values" "(let*-values ((formals expresion) ...) body)" "srfi-11.html" "let*-values" "Specification (SRFI 11)")
("string?" "string? obj -> boolean" "srfi-13.html" "string-p" "Predicates (SRFI 13)")
("string-null?" "string-null? s -> boolean" "srfi-13.html" "string-null-p" "Predicates (SRFI 13)")
("string-every" "string-every char/char-set/pred s [start end] -> value" "srfi-13.html" "string-every" "Predicates (SRFI 13)")
("string-any" "string-any char/char-set/pred s [start end] -> value" "srfi-13.html" "string-any" "Predicates (SRFI 13)")
("make-string" "make-string len [char] -> string" "srfi-13.html" "make-string" "Constructors (SRFI 13)")
("string" "string char1 ... -> string" "srfi-13.html" "string" "Constructors (SRFI 13)")
("string-tabulate" "string-tabulate proc len -> string" "srfi-13.html" "string-tabulate" "Constructors (SRFI 13)")
("string->list" "string->list s [start end] -> char-list" "srfi-13.html" "string2list" "List -> string conversion (SRFI 13)")
("list->string" "list->string char-list -> string" "srfi-13.html" "list2string" "List -> string conversion (SRFI 13)")
("reverse-list->string" "reverse-list->string char-list -> string" "srfi-13.html" "reverse-list2string" "List -> string conversion (SRFI 13)")
("string-join" "string-join string-list [delimiter grammar] -> string" "srfi-13.html" "string-join" "List -> string conversion (SRFI 13)")
("string-length" "string-length s -> integer" "srfi-13.html" "string-length" "Selection (SRFI 13)")
("string-ref" "string-ref s i -> char" "srfi-13.html" "string-ref" "Selection (SRFI 13)")
("string-copy" "string-copy s [start end] -> string" "srfi-13.html" "string-copy" "Selection (SRFI 13)")
("substring/shared" "substring/shared s start [end] -> string" "srfi-13.html" "substring/shared" "Selection (SRFI 13)")
("string-copy!" "string-copy! target tstart s [start end] -> unspecified" "srfi-13.html" "string-copy!" "Selection (SRFI 13)")
("string-take" "string-take s nchars -> string" "srfi-13.html" "string-take" "Selection (SRFI 13)")
("string-drop" "string-drop s nchars -> string" "srfi-13.html" "string-drop" "Selection (SRFI 13)")
("string-take-right" "string-take-right s nchars -> string" "srfi-13.html" "string-take-right" "Selection (SRFI 13)")
("string-drop-right" "string-drop-right s nchars -> string" "srfi-13.html" "string-drop-right" "Selection (SRFI 13)")
("string-pad" "string-pad s len [char start end] -> string" "srfi-13.html" "string-pad" "Selection (SRFI 13)")
("string-pad-right" "string-pad-right s len [char start end] -> string" "srfi-13.html" "string-pad-right" "Selection (SRFI 13)")
("string-trim" "string-trim s [char/char-set/pred start end] -> string" "srfi-13.html" "string-trim" "Selection (SRFI 13)")
("string-trim-right" "string-trim-right s [char/char-set/pred start end] -> string" "srfi-13.html" "string-trim-right" "Selection (SRFI 13)")
("string-trim-both" "string-trim-both s [char/char-set/pred start end] -> string" "srfi-13.html" "string-trim-both" "Selection (SRFI 13)")
("string-set!" "string-set! s i char -> unspecified" "srfi-13.html" "string-set!" "Modification (SRFI 13)")
("string-fill!" "string-fill! s char [start end] -> unspecified" "srfi-13.html" "string-fill!" "Modification (SRFI 13)")
("string-compare" "string-compare   s1 s2 proc< proc= proc> [start1 end1 start2 end2] -> values" "srfi-13.html" "string-compare" "Comparison (SRFI 13)")
("string-compare-ci" "string-compare-ci s1 s2 proc< proc= proc> [start1 end1 start2 end2] -> values" "srfi-13.html" "string-compare-ci" "Comparison (SRFI 13)")
("string=" "string= s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string=" "Comparison (SRFI 13)")
("string<>" "string<> s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string<>" "Comparison (SRFI 13)")
("string<" "string< s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string<" "Comparison (SRFI 13)")
("string>" "string> s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string>" "Comparison (SRFI 13)")
("string<=" "string<= s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string<=" "Comparison (SRFI 13)")
("string>=" "string>= s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string>=" "Comparison (SRFI 13)")
("string-ci=" "string-ci= s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string-ci=" "Comparison (SRFI 13)")
("string-ci<>" "string-ci<> s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string-ci<>" "Comparison (SRFI 13)")
("string-ci<" "string-ci< s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string-ci<" "Comparison (SRFI 13)")
("string-ci>" "string-ci> s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string-ci>" "Comparison (SRFI 13)")
("string-ci<=" "string-ci<= s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string-ci<=" "Comparison (SRFI 13)")
("string-ci>=" "string-ci>= s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string-ci>=" "Comparison (SRFI 13)")
("string-hash" "string-hash   s [bound start end] -> integer" "srfi-13.html" "string-hash" "Comparison (SRFI 13)")
("string-hash-ci" "string-hash-ci s [bound start end] -> integer" "srfi-13.html" "string-hash-ci" "Comparison (SRFI 13)")
("string-prefix-length" "string-prefix-length   s1 s2 [start1 end1 start2 end2] -> integer" "srfi-13.html" "string-prefix-length" "Prefixes & Suffixes (SRFI 13)")
("string-suffix-length" "string-suffix-length   s1 s2 [start1 end1 start2 end2] -> integer" "srfi-13.html" "string-suffix-length" "Prefixes & Suffixes (SRFI 13)")
("string-prefix-length-ci" "string-prefix-length-ci s1 s2 [start1 end1 start2 end2] -> integer" "srfi-13.html" "string-prefix-length-ci" "Prefixes & Suffixes (SRFI 13)")
("string-suffix-length-ci" "string-suffix-length-ci s1 s2 [start1 end1 start2 end2] -> integer" "srfi-13.html" "string-suffix-length-ci" "Prefixes & Suffixes (SRFI 13)")
("string-prefix?" "string-prefix?   s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string-prefix-p" "Prefixes & Suffixes (SRFI 13)")
("string-suffix?" "string-suffix?   s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string-suffix-p" "Prefixes & Suffixes (SRFI 13)")
("string-prefix-ci?" "string-prefix-ci? s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string-prefix-ci-p" "Prefixes & Suffixes (SRFI 13)")
("string-suffix-ci?" "string-suffix-ci? s1 s2 [start1 end1 start2 end2] -> boolean" "srfi-13.html" "string-suffix-ci-p" "Prefixes & Suffixes (SRFI 13)")
("string-index" "string-index s char/char-set/pred [start end] -> integer or #f" "srfi-13.html" "string-index" "Searching (SRFI 13)")
("string-index-right" "string-index-right s char/char-set/pred [start end] -> integer or #f" "srfi-13.html" "string-index-right" "Searching (SRFI 13)")
("string-skip" "string-skip s char/char-set/pred [start end] -> integer or #f" "srfi-13.html" "string-skip" "Searching (SRFI 13)")
("string-skip-right" "string-skip-right s char/char-set/pred [start end] -> integer or #f" "srfi-13.html" "string-skip-right" "Searching (SRFI 13)")
("string-count" "string-count s char/char-set/pred [start end] -> integer" "srfi-13.html" "string-count" "Searching (SRFI 13)")
("string-contains" "string-contains   s1 s2 [start1 end1 start2 end2] -> integer or false" "srfi-13.html" "string-contains" "Searching (SRFI 13)")
("string-contains-ci" "string-contains-ci s1 s2 [start1 end1 start2 end2] -> integer or false" "srfi-13.html" "string-contains-ci" "Searching (SRFI 13)")
("string-titlecase" "string-titlecase s [start end] -> string" "srfi-13.html" "string-titlecase" "Alphabetic case mapping (SRFI 13)")
("string-titlecase!" "string-titlecase! s [start end] -> unspecified" "srfi-13.html" "string-titlecase!" "Alphabetic case mapping (SRFI 13)")
("string-upcase" "string-upcase s [start end] -> string" "srfi-13.html" "string-upcase" "Alphabetic case mapping (SRFI 13)")
("string-upcase!" "string-upcase! s [start end] -> unspecified" "srfi-13.html" "string-upcase!" "Alphabetic case mapping (SRFI 13)")
("string-downcase" "string-downcase s [start end] -> string" "srfi-13.html" "string-downcase" "Alphabetic case mapping (SRFI 13)")
("string-downcase!" "string-downcase! s [start end] -> unspecified" "srfi-13.html" "string-downcase!" "Alphabetic case mapping (SRFI 13)")
("string-reverse" "string-reverse s [start end] -> string" "srfi-13.html" "string-reverse" "Reverse & append (SRFI 13)")
("string-reverse!" "string-reverse! s [start end] -> unspecified" "srfi-13.html" "string-reverse!" "Reverse & append (SRFI 13)")
("string-append" "string-append s1 ... -> string" "srfi-13.html" "string-append" "Reverse & append (SRFI 13)")
("string-concatenate" "string-concatenate string-list -> string" "srfi-13.html" "string-concatenate" "Reverse & append (SRFI 13)")
("string-concatenate/shared" "string-concatenate/shared string-list -> string" "srfi-13.html" "string-concatenate/shared" "Reverse & append (SRFI 13)")
("string-append/shared" "string-append/shared s1 ... -> string" "srfi-13.html" "string-append/shared" "Reverse & append (SRFI 13)")
("string-concatenate-reverse" "string-concatenate-reverse string-list [final-string end] -> string" "srfi-13.html" "string-concatenate-reverse" "Reverse & append (SRFI 13)")
("string-concatenate-reverse/shared" "string-concatenate-reverse/shared string-list [final-string end] -> string" "srfi-13.html" "string-concatenate-reverse/shared" "Reverse & append (SRFI 13)")
("string-map" "string-map proc s [start end] -> string" "srfi-13.html" "string-map" "Fold, unfold & map (SRFI 13)")
("string-map!" "string-map! proc s [start end] -> unspecified" "srfi-13.html" "string-map!" "Fold, unfold & map (SRFI 13)")
("string-fold" "string-fold kons knil s [start end] -> value" "srfi-13.html" "string-fold" "Fold, unfold & map (SRFI 13)")
("string-fold-right" "string-fold-right kons knil s [start end] -> value" "srfi-13.html" "string-fold-right" "Fold, unfold & map (SRFI 13)")
("string-unfold" "string-unfold p f g seed [base make-final] -> string" "srfi-13.html" "string-unfold" "Fold, unfold & map (SRFI 13)")
("string-unfold-right" "tring-unfold-right p f g seed [base make-final] -> string" "srfi-13.html" "string-unfold-right" "Fold, unfold & map (SRFI 13)")
("string-for-each" "string-for-each proc s [start end] -> unspecified" "srfi-13.html" "string-for-each" "Fold, unfold & map (SRFI 13)")
("string-for-each-index" "string-for-each-index proc s [start end] -> unspecified" "srfi-13.html" "string-for-each-index" "Fold, unfold & map (SRFI 13)")
("xsubstring" "xsubstring s from [to start end] -> string" "srfi-13.html" "xsubstring" "Replicate & rotate (SRFI 13)")
("string-xcopy!" "string-xcopy! target tstart s sfrom [sto start end] -> unspecified" "srfi-13.html" "string-xcopy!" "Replicate & rotate (SRFI 13)")
("string-replace" "string-replace s1 s2 start1 end1 [start2 end2] -> string" "srfi-13.html" "string-replace" "Miscellaneous: insertion, parsing (SRFI 13)")
("string-tokenize" "string-tokenize s [token-set start end] -> list" "srfi-13.html" "string-tokenize" "Miscellaneous: insertion, parsing (SRFI 13)")
("string-filter" "string-filter s char/char-set/pred [start end] -> string" "srfi-13.html" "string-filter" "Filtering & deleting (SRFI 13)")
("string-delete" "string-delete s char/char-set/pred [start end] -> string" "srfi-13.html" "string-delete" "Filtering & deleting (SRFI 13)")
("string-parse-start+end" "string-parse-start+end proc s args -> [rest start end]" "srfi-13.html" "string-parse-start+end" "Low level procedures (SRFI 13)")
("string-parse-final-start+end" "string-parse-final-start+end proc s args -> [start end]" "srfi-13.html" "string-parse-final-start+end" "Low level procedures (SRFI 13)")
("let-string-start+end" "let-string-start+end (start end [rest]) proc-exp s-exp args-exp body ... -> value(s)" "srfi-13.html" "let-string-start+end" "Low level procedures (SRFI 13)")
("check-substring-spec" "check-substring-spec proc s start end -> unspecified" "srfi-13.html" "check-substring-spec" "Low level procedures (SRFI 13)")
("substring-spec-ok?" "substring-spec-ok? s start end -> boolean" "srfi-13.html" "substring-spec-ok-p" "Low level procedures (SRFI 13)")
("make-kmp-restart-vector" "make-kmp-restart-vector s [c= start end] -> integer-vector" "srfi-13.html" "make-kmp-restart-vector" "Low level procedures (SRFI 13)")
("kmp-step" "kmp-step pat rv c i c= p-start -> integer" "srfi-13.html" "kmp-step" "Low level procedures (SRFI 13)")
("string-kmp-partial-search" "string-kmp-partial-search pat rv s i [c= p-start s-start s-end] -> integer" "srfi-13.html" "string-kmp-partial-search" "Low level procedures (SRFI 13)")
("char-set?" "char-set? obj -> boolean" "srfi-14.html" "char-set-p" "Predicates & comparison (SRFI 14)")
("char-set=" "char-set= cs1 ... -> boolean" "srfi-14.html" "char-set=" "Predicates & comparison (SRFI 14)")
("char-set<=" "char-set<= cs1 ... -> boolean" "srfi-14.html" "char-set<=" "Predicates & comparison (SRFI 14)")
("char-set-hash" "char-set-hash cs [bound] -> integer" "srfi-14.html" "char-set-hash" "Predicates & comparison (SRFI 14)")
("char-set-cursor" "char-set-cursor cset -> cursor" "srfi-14.html" "char-set-cursor" "Iterating over character sets (SRFI 14)")
("char-set-ref" "char-set-ref cset cursor -> char" "srfi-14.html" "char-set-ref" "Iterating over character sets (SRFI 14)")
("char-set-cursor-next" "char-set-cursor-next cset cursor -> cursor" "srfi-14.html" "char-set-cursor-next" "Iterating over character sets (SRFI 14)")
("end-of-char-set?" "end-of-char-set? cursor -> boolean" "srfi-14.html" "end-of-char-set-p" "Iterating over character sets (SRFI 14)")
("char-set-fold" "char-set-fold kons knil cs -> object" "srfi-14.html" "char-set-fold" "Iterating over character sets (SRFI 14)")
("char-set-unfold" "char-set-unfold f p g seed [base-cs] -> char-set" "srfi-14.html" "char-set-unfold" "Iterating over character sets (SRFI 14)")
("char-set-unfold!" "char-set-unfold! f p g seed base-cs -> char-set" "srfi-14.html" "char-set-unfold!" "Iterating over character sets (SRFI 14)")
("char-set-for-each" "char-set-for-each proc cs -> unspecified" "srfi-14.html" "char-set-for-each" "Iterating over character sets (SRFI 14)")
("char-set-map" "char-set-map proc cs -> char-set" "srfi-14.html" "char-set-map" "Iterating over character sets (SRFI 14)")
("char-set-copy" "char-set-copy cs -> char-set" "srfi-14.html" "char-set-copy" "Creating character sets (SRFI 14)")
("char-set" "char-set char1 ... -> char-set" "srfi-14.html" "char-set" "Creating character sets (SRFI 14)")
("list->char-set" "list->char-set char-list [base-cs] -> char-set" "srfi-14.html" "list->char-set" "Creating character sets (SRFI 14)")
("list->char-set!" "list->char-set! char-list base-cs -> char-set" "srfi-14.html" "list->char-set!" "Creating character sets (SRFI 14)")
("string->char-set" "string->char-set s [base-cs] -> char-set" "srfi-14.html" "string->char-set" "Creating character sets (SRFI 14)")
("string->char-set!" "string->char-set! s base-cs -> char-set" "srfi-14.html" "string->char-set!" "Creating character sets (SRFI 14)")
("char-set-filter" "char-set-filter pred cs [base-cs] -> char-set" "srfi-14.html" "char-set-filter" "Creating character sets (SRFI 14)")
("char-set-filter!" "char-set-filter! pred cs base-cs -> char-set" "srfi-14.html" "char-set-filter!" "Creating character sets (SRFI 14)")
("ucs-range->char-set" "ucs-range->char-set lower upper [error? base-cs] -> char-set" "srfi-14.html" "ucs-range->char-set" "Creating character sets (SRFI 14)")
("ucs-range->char-set!" "ucs-range->char-set! lower upper error? base-cs -> char-set" "srfi-14.html" "ucs-range->char-set!" "Creating character sets (SRFI 14)")
("->char-set" "->char-set x -> char-set" "srfi-14.html" "->char-set" "Creating character sets (SRFI 14)")
("char-set->list" "char-set->list cs -> character-list" "srfi-14.html" "char-set->list" "Querying character sets (SRFI 14)")
("char-set->string" "char-set->string cs -> string" "srfi-14.html" "char-set->string" "Querying character sets (SRFI 14)")
("char-set-size" "char-set-size cs -> integer" "srfi-14.html" "char-set-size" "Querying character sets (SRFI 14)")
("char-set-count" "char-set-count pred cs -> integer" "srfi-14.html" "char-set-count" "Querying character sets (SRFI 14)")
("char-set-every" "char-set-every pred cs -> boolean" "srfi-14.html" "char-set-every" "Querying character sets (SRFI 14)")
("char-set-any" "char-set-any  pred cs -> boolean" "srfi-14.html" "char-set-any" "Querying character sets (SRFI 14)")
("char-set-contains?" "char-set-contains? cs char -> boolean" "srfi-14.html" "char-set-contains-p" "Querying character sets (SRFI 14)")
("char-set-adjoin" "char-set-adjoin cs char1 ... -> char-set" "srfi-14.html" "char-set-adjoin" "Character-set algebra (SRFI 14)")
("char-set-delete" "char-set-delete cs char1 ... -> char-set" "srfi-14.html" "char-set-delete" "Character-set algebra (SRFI 14)")
("char-set-adjoin!" "char-set-adjoin! cs char1 ... -> char-set" "srfi-14.html" "char-set-adjoin!" "Character-set algebra (SRFI 14)")
("char-set-delete!" "char-set-delete! cs char1 ... -> char-set" "srfi-14.html" "char-set-delete!" "Character-set algebra (SRFI 14)")
("char-set-complement" "char-set-complement cs -> char-set" "srfi-14.html" "char-set-complement" "Character-set algebra (SRFI 14)")
("char-set-union" "char-set-union cs1 ... -> char-set" "srfi-14.html" "char-set-union" "Character-set algebra (SRFI 14)")
("char-set-intersection" "char-set-intersection cs1 ... -> char-set" "srfi-14.html" "char-set-intersection" "Character-set algebra (SRFI 14)")
("char-set-difference" "char-set-difference cs1 cs2 ... -> char-set" "srfi-14.html" "char-set-difference" "Character-set algebra (SRFI 14)")
("char-set-xor" "char-set-xor cs1 ... -> char-set" "srfi-14.html" "char-set-xor" "Character-set algebra (SRFI 14)")
("char-set-diff+intersection" "char-set-diff+intersection cs1 cs2 ... -> [char-set char-set]" "srfi-14.html" "char-set-diff+intersection" "Character-set algebra (SRFI 14)")
("char-set-complement!" "char-set-complement! cs  -> char-set" "srfi-14.html" "char-set-complement!" "Character-set algebra (SRFI 14)")
("char-set-union!" "char-set-union! cs1 cs2 ... -> char-set" "srfi-14.html" "char-set-union!" "Character-set algebra (SRFI 14)")
("char-set-intersection!" "char-set-intersection! cs1 cs2 ... -> char-set" "srfi-14.html" "char-set-intersection!" "Character-set algebra (SRFI 14)")
("char-set-difference!" "char-set-difference! cs1 cs2 ... -> char-set" "srfi-14.html" "char-set-difference!" "Character-set algebra (SRFI 14)")
("char-set-xor!" "char-set-xor! cs1 cs2 ... -> char-set" "srfi-14.html" "char-set-xor!" "Character-set algebra (SRFI 14)")
("char-set-diff+intersection!" "char-set-diff+intersection! cs1 cs2 cs3 ... -> [char-set char-set]" "srfi-14.html" "char-set-diff+intersection!" "Character-set algebra (SRFI 14)")
("char-set:lower-case" "Lower-case letters" "srfi-14.html" "char-set:lower-case" "Standard character sets (SRFI 14)")
("char-set:upper-case" "Upper-case letters" "srfi-14.html" "char-set:upper-case" "Standard character sets (SRFI 14)")
("char-set:title-case" "Title-case letters" "srfi-14.html" "char-set:title-case" "Standard character sets (SRFI 14)")
("char-set:letter" "Letters" "srfi-14.html" "char-set:letter" "Standard character sets (SRFI 14)")
("char-set:digit" "Digits" "srfi-14.html" "char-set:digit" "Standard character sets (SRFI 14)")
("char-set:letter+digit" "Letters and digits" "srfi-14.html" "char-set:letter+digit" "Standard character sets (SRFI 14)")
("char-set:graphic" "Printing characters except spaces" "srfi-14.html" "char-set:graphic" "Standard character sets (SRFI 14)")
("char-set:printing" "Printing characters including spaces" "srfi-14.html" "char-set:printing" "Standard character sets (SRFI 14)")
("char-set:whitespace" "Whitespace characters" "srfi-14.html" "char-set:whitespace" "Standard character sets (SRFI 14)")
("char-set:iso-control" "The ISO control characters" "srfi-14.html" "char-set:iso-control" "Standard character sets (SRFI 14)")
("char-set:punctuation" "Punctuation characters" "srfi-14.html" "char-set:punctuation" "Standard character sets (SRFI 14)")
("char-set:symbol" "Symbol characters" "srfi-14.html" "char-set:symbol" "Standard character sets (SRFI 14)")
("char-set:hex-digit" "A hexadecimal digit: 0-9, A-F, a-f" "srfi-14.html" "char-set:hex-digit" "Standard character sets (SRFI 14)")
("char-set:blank" "Blank characters -- horizontal whitespace" "srfi-14.html" "char-set:blank" "Standard character sets (SRFI 14)")
("char-set:ascii" "All characters in the ASCII set." "srfi-14.html" "char-set:ascii" "Standard character sets (SRFI 14)")
("char-set:empty" "Empty set" "srfi-14.html" "char-set:empty" "Standard character sets (SRFI 14)")
("char-set:full" "All characters" "srfi-14.html" "char-set:full" "Standard character sets (SRFI 14)")
("case-lambda" "(CASE-LAMBDA <clause> ...)" "srfi-16.html" "case-lambda" "Syntax for procedures of variable arity (SRFI 16)")
("set!" "(set! (proc arg ...) value)" "srfi-17.html"  "set!" "Specification (SRFI 17)")
("getter-with-setter" "(getter-with-setter getter setter)" "srfi-17.html"  "getter-with-setter" "Specification (SRFI 17)")
("time system" "Standard time systems" "srfi-19.html" "tymesystem" "Specification (SRFI 19)")
("time object" "Components of a time object" "srfi-19.html" "timeobject" "Specification (SRFI 19)")
("date object" "Represents a point in time" "srfi-19.html" "dateobject" "Specification (SRFI 19)")
("time-duration" "Symbol representing Time duration" "srfi-19.html" "" "Specification: Constants (SRFI 19)")
("time-monotonic" "Symbol representing monotonic time" "srfi-19.html" "time-monotonic" "Specification: Constants (SRFI 19)")
("time-process" "Symbol representing time spent in current process" "srfi-19.html" "time-process" "Specification: Constants (SRFI 19)")
("time-tai" "Symbol representing TAI time" "srfi-19.html" "time-tai" "Specification: Constants (SRFI 19)")
("time-thread" "Symbol representing time spent in current thread" "srfi-19.html" "time-thread" "Specification: Constants (SRFI 19)")
("time-utc" "Symbol representting UTC time" "srfi-19.html" "time-utc" "Specification: Constants (SRFI 19)")
("current-date" "current-date -> [tz-offset] -> date" "srfi-19.html" "" "Specification: Current time and clock resolution (SRFI 19)")
("current-julian-day" "current-julian-day -> jdn" "srfi-19.html" "current-julian-day" "Specification: Current time and clock resolution (SRFI 19)")
("current-modified-julian-day" "current-modified-julian-day -> mjdn" "srfi-19.html" "current-modified-julian-day" "Specification: Current time and clock resolution (SRFI 19)")
("current-time" "current-time [time-type] -> time" "srfi-19.html" "current-time" "Specification: Current time and clock resolution (SRFI 19)")
("time-resolution" "time-resolution [time-type] -> integer" "srfi-19.html" "time-resolution" "Specification: Current time and clock resolution (SRFI 19)")
("make-time" "make-time type nanosecond second -> time" "srfi-19.html" "make-time" "Specification: Time object and accessors (SRFI 19)")
("time?" "time? object -> boolean" "srfi-19.html" "time-p" "Specification: Time object and accessors (SRFI 19)")
("time-type" "time-type time -> time-type" "srfi-19.html" "time-type" "Specification: Time object and accessors (SRFI 19)")
("time-nanosecond" "time-nanosecond time -> integer" "srfi-19.html" "time-nanosecond" "Specification: Time object and accessors (SRFI 19)")
("time-second" "time-second time -> integer" "srfi-19.html" "time-second" "Specification: Time object and accessors (SRFI 19)")
("set-time-type!" "set-time-type! time time-type" "srfi-19.html" "set-time-type!" "Specification: Time object and accessors (SRFI 19)")
("set-time-nanosecond!" "set-time-nanosecond! time integer" "srfi-19.html" "set-time-nanosecond!" "Specification: Time object and accessors (SRFI 19)")
("set-time-second!" "set-time-second! time integer" "srfi-19.html" "set-time-second!" "Specification: Time object and accessors (SRFI 19)")
("copy-time" "copy-time time1 -> time2" "srfi-19.html" "copy-time" "Specification: Time object and accessors (SRFI 19)")
("time<=?" "time<=? time1 time2 -> boolean" "srfi-19.html" "time<=-p" "Specification: Time comparison procedures (SRFI 19)")
("time<?" "time<? time1 time2 -> boolean" "srfi-19.html" "time<-p" "Specification: Time comparison procedures (SRFI 19)")
("time=?" "time=? time1 time2 -> boolean" "srfi-19.html" "time=-p" "Specification: Time comparison procedures (SRFI 19)")
("time>=?" "time>=? time1 time2 -> boolean" "srfi-19.html" "time>=-p" "Specification: Time comparison procedures (SRFI 19)")
("time>?" "time>? time1 time2 -> boolean" "srfi-19.html" "time>-p" "Specification: Time comparison procedures (SRFI 19)")
("time-difference" "time-difference time1 time2 -> time-duration" "srfi-19.html" "time-difference" "Specification: Time arithmetic procedures (SRFI 19)")
("time-difference!" "time-difference! time1 time2 -> time-duration" "srfi-19.html" "time-difference!" "Specification: Time arithmetic procedures (SRFI 19)")
("add-duration" "add-duration time1 time-duration -> time" "srfi-19.html" "add-duration" "Specification: Time arithmetic procedures (SRFI 19)")
("add-duration!" "add-duration! time1 time-duration -> time" "srfi-19.html" "add-duration!" "Specification: Time arithmetic procedures (SRFI 19)")
("subtract-duration" "subtract-duration time1 time-duration -> time" "srfi-19.html" "subtract-duration" "Specification: Time arithmetic procedures (SRFI 19)")
("subtract-duration!" "subtract-duration time1 time-duration -> time" "srfi-19.html" "subtract-duration!" "Specification: Time arithmetic procedures (SRFI 19)")
("make-date" "make-date nanosecond second minute hour day month year zone-offset -> date" "srfi-19.html" "make-date" "Specification: Time object and accessors (SRFI 19)")
("date?" "date? date -> boolean" "srfi-19.html" "date-p" "Specification: Time object and accessors (SRFI 19)")
("date-nanosecond" "date-nanosecond date -> integer" "srfi-19.html" "date-nanosecond" "Specification: Time object and accessors (SRFI 19)")
("date-second" "date-second date -> integer" "srfi-19.html" "date-second" "Specification: Time object and accessors (SRFI 19)")
("date-minute" "date-minute date -> integer" "srfi-19.html" "date-minute" "Specification: Time object and accessors (SRFI 19)")
("date-hour" "date-hour date -> integer" "srfi-19.html" "date-hour" "Specification: Time object and accessors (SRFI 19)")
("date-day" "date-day date -> integer" "srfi-19.html" "date-day" "Specification: Time object and accessors (SRFI 19)")
("date-month" "date-month date -> integer" "srfi-19.html" "date-month" "Specification: Time object and accessors (SRFI 19)")
("date-year" "date-year date -> integer" "srfi-19.html" "date-year" "Specification: Time object and accessors (SRFI 19)")
("date-zone-offset" "date-zone-offset date -> integer" "srfi-19.html" "date-zone-offset" "Specification: Time object and accessors (SRFI 19)")
("date-year-day" "date-year-day date -> integer" "srfi-19.html" "date-year-day" "Specification: Time object and accessors (SRFI 19)")
("date-week-day" "date-week-day date -> integer" "srfi-19.html" "date-week-day" "Specification: Time object and accessors (SRFI 19)")
("date-week-number" "date-week-number date day-of-week-starting-week -> integer" "srfi-19.html" "date-week-number" "Specification: Time object and accessors (SRFI 19)")
("date->julian-day" "date->julian-day date -> jd" "srfi-19.html" "date->julian-day" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("date->modified-julian-day" "date->modified-julian-day date -> mjd" "srfi-19.html" "date->modified-julian-day" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("date->time-monotonic" "date->time-monotonic date -> time-monotonic" "srfi-19.html" "date->time-monotonic" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("date->time-tai" "date->time-tai date -> time-tai" "srfi-19.html" "date->time-tai" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("date->time-utc" "date->time-utc date -> time-utc" "srfi-19.html" "date->time-utc" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("julian-day->date" "julian-day->date jd [tz-offset] -> date" "srfi-19.html" "julian-day->date" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("julian-day->time-monotonic" "julian-day->time-monotonic jd -> time-monotonic" "srfi-19.html" "julian-day->time-monotonic" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("julian-day->time-tai" "julian-day->time-tai jd -> time-tai" "srfi-19.html" "julian-day->time-tai" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("julian-day->time-utc" "julian-day->time-utc jd -> time-utc" "srfi-19.html" "julian-day->time-utc" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("modified-julian-day->date" "modified-julian-day->date mjd -> [tz-offset] date" "srfi-19.html" "modified-julian-day->date" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("modified-julian-day->time-monotonic" "modified-julian-day->time-monotonic mjd -> time-tai" "srfi-19.html" "modified-julian-day->time-monotonic" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("modified-julian-day->time-tai" "modified-julian-day->time-tai mjd -> time-tai" "srfi-19.html" "modified-julian-day->time-tai" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("modified-julian-day->time-utc" "modified-julian-day->time-utc mjd -> time-utc" "srfi-19.html" "modified-julian-day->time-utc" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-monotonic->date" "time-monotonic->date time-monotonic [tz-offset] -> date" "srfi-19.html" "time-monotonic->date" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-monotonic->julian-day" "time-monotonic->julian-day time-monotonic -> mjd" "srfi-19.html" "time-monotonic->julian-day" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-monotonic->modified-julian-day" "time-monotonic->modified-julian-day time-monotonic -> mjd" "srfi-19.html" "time-monotonic->modified-julian-day" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-monotonic->time-tai" "time-monotonic->time-tai time-monotonic -> time-tai" "srfi-19.html" "time-monotonic->time-tai" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-monotonic->time-tai!" "time-monotonic->time-tai! time-monotonic -> time-tai" "srfi-19.html" "time-monotonic->time-tai!" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-monotonic->time-utc" "time-monotonic->time-utc time-monotonic -> time-utc" "srfi-19.html" "time-monotonic->time-utc" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-monotonic->time-utc!" "time-monotonic->time-utc! time-monotonic -> time-utc" "srfi-19.html" "time-monotonic->time-utc!" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-tai->date" "time-tai->date time-tai . tz-offset -> date" "srfi-19.html" "time-tai->date" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-tai->julian-day" "time-tai->julian-day time-tai -> jd" "srfi-19.html" "time-tai->julian-day" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-tai->modified-julian-day" "time-tai->modified-julian-day time-tai -> mjd" "srfi-19.html" "time-tai->modified-julian-day" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-tai->time-monotonic" "time-tai->time-monotonic time-tai -> time-monotonic" "srfi-19.html" "time-tai->time-monotonic" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-tai->time-monotonic!" "time-tai->time-monotonic! time-tai -> time-monotonic" "srfi-19.html" "time-tai->time-monotonic!" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-tai->time-utc" "time-tai->time-utc time-tai -> time-utc" "srfi-19.html" "time-tai->time-utc" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-tai->time-utc!" "time-tai->time-utc! time-tai -> time-utc" "srfi-19.html" "time-tai->time-utc!" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-utc->date" "time-utc->date time-utc . tz-offset -> time-utc" "srfi-19.html" "time-utc->date" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-utc->julian-day" "time-utc->julian-day time-utc -> jd" "srfi-19.html" "time-utc->julian-day" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-utc->modified-julian-day" "time-utc->modified-julian-day time-utc -> mjd" "srfi-19.html" "time-utc->modified-julian-day" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-utc->time-monotonic" "time-utc->time-monotonic time-utc -> time-monotonic" "srfi-19.html" "time-utc->time-monotonic" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-utc->time-monotonic!" "time-utc->time-monotonic! time-utc -> time-monotonic" "srfi-19.html" "time-utc->time-monotonic!" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-utc->time-tai" "time-utc->time-tai time-utc -> time-tai" "srfi-19.html" "time-utc->time-tai" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("time-utc->time-tai!" "time-utc->time-tai! time-utc -> time-tai" "srfi-19.html" "time-utc->time-tai!" "Specification: Time/Date/Julian Day/Modified Julian Day Converters ")
("date->string" "date->string date [format-string] -> string" "srfi-19.html" "date->string" "Specification: Date to String/String to Date Converters")
("string->date" "string->date input-string template-string -> date" "srfi-19.html" "string->date" "Specification: Date to String/String to Date Converters")
("error" "(error reason [arg1 [arg2 ...]])" "srfi-23.html" "error" "Specification: the error procedure")
("array?" "(array? obj)" "srfi-25.html" "array-p" "Specification: Array procedures")
("make-array" "(make-array shape)" "srfi-25.html" "make-array" "Specification: Array procedures")
("make-array" "(make-array shape obj)" "srfi-25.html" "make-array" "Specification: Array procedures")
("shape" "(shape bound ...)" "srfi-25.html" "shape" "Specification: Array procedures")
("array" "(array shape obj ...)" "srfi-25.html" "array" "Specification: Array procedures")
("array-rank" "(array-rank array)" "srfi-25.html" "array-rank" "Specification: Array procedures")
("array-start" "(array-start array k)" "srfi-25.html" "array-start" "Specification: Array procedures")
("array-end" "(array-end array k)" "srfi-25.html" "array-end" "Specification: Array procedures")
("array-ref" "(array-ref array k ...)" "srfi-25.html" "array-ref" "Specification: Array procedures")
("array-ref" "(array-ref array index)" "srfi-25.html" "array-ref" "Specification: Array procedures")
("array-set!" "(array-set! array k ... obj)" "srfi-25.html" "array-set!" "Specification: Array procedures")
("array-set!" "(array-set! array index obj)" "srfi-25.html" "array-set!" "Specification: Array procedures")
("share-array" "(share-array array shape proc)" "srfi-25.html" "share-array" "Specification: Array procedures")
("cut" "(cut <slot-or-expr> <slot-or-expr>*)" "srfi-26.html" "cut" "Specification: Specializing Parameters without Currying")
("cut" "(cut <slot-or-expr> <slot-or-expr>* <...>)" "srfi-26.html" "cut" "Specification: Specializing Parameters without Currying")
("cute" "(cute <slot-or-expr> <slot-or-expr>*)" "srfi-26.html" "cute" "Specification: Specializing Parameters without Currying")
("cute" "(cute <slot-or-expr> <slot-or-expr>* <...>)" "srfi-26.html" "cute" "Specification: Specializing Parameters without Currying")
("random-integer" "(random-integer n) -> x" "srfi-27.html" "random-integer" "Specification: Sources of Random Bits")
("random-real" "(random-real) -> x" "srfi-27.html" "random-real" "Specification: Sources of Random Bits")
("default-random-source" "default-random-source" "srfi-27.html" "default-random-source" "Specification: Sources of Random Bits")
("make-random-source" "(make-random-source) -> s" "srfi-27.html" "make-random-source" "Specification: Sources of Random Bits")
("random-source?" "(random-source? obj) -> boolean" "srfi-27.html" "random-source-p" "Specification: Sources of Random Bits")
("random-source-state-ref" "(random-source-state-ref s) -> state" "srfi-27.html" "random-source-state-ref" "Specification: Sources of Random Bits")
("random-source-state-ref!" "(random-source-state-ref! s state)" "srfi-27.html" "random-source-state-ref" "Specification: Sources of Random Bits")
("random-source-randomize!" "(random-source-randomize! s)" "srfi-27.html" "random-source-randomize!" "Specification: Sources of Random Bits")
("random-source-pseudo-randomize!" "(random-source-pseudo-randomize! s i j)" "srfi-27.html" "random-source-pseudo-randomize!" "Specification: Sources of Random Bits")
("random-source-make-integers" "(random-source-make-integers s) -> rand" "srfi-27.html" "random-source-make-integers" "Specification: Sources of Random Bits")
("random-source-make-reals" "(random-source-make-reals s) -> rand" "srfi-27.html" "random-source-make-reals" "Specification: Sources of Random Bits")
("random-source-make-reals" "(random-source-make-reals s unit) -> rand" "srfi-27.html" "random-source-make-reals" "Specification: Sources of Random Bits")
("format" "format format-string [obj ...] -> string" "srfi-28.html" "format" "Specification: format")
("current-language" "current-language -> symbol" "srfi-29.html" "current-language" "Specification: Bundle Searching")
("current-language" "current-language symbol -> undefined" "srfi-29.html" "current-language" "Specification: Bundle Searching")
("current-country" "current-country -> symbol" "srfi-29.html" "current-country" "Specification: Bundle Searching")
("current-country" "current-country symbol -> undefined" "srfi-29.html" "current-country" "Specification: Bundle Searching")
("current-locale-details" "current-locale-details -> list of symbol" "srfi-29.html" "current-locale-details" "Specification: Bundle Searching")
("current-locale-details" "current-locale-details list-of-symbols -> undefined" "srfi-29.html" "current-locale-details" "Specification: Bundle Searching")
("declare-bundle!" "declare-bundle! bundle-specifier association-list -> undefined" "srfi-29.html" "declare-bundle!" "Specification: Preparing Bundles")
("store-bundle" "store-bundle bundle-specifier -> boolean" "srfi-29.html" "store-bundle" "Specification: Preparing Bundles")
("load-bundle!" "load-bundle! bundle-specifier -> boolean" "srfi-29.html" "load-bundle!" "Specification: Preparing Bundles")
("localized-template" "localized-template package-name message-template-name -> string of #f" "srfi-29.html" "localized-template" "Specification: Retrieving Localized Message Templates")
("multi-line comments" "#| ... |#" "srfi-30.html" "spec" "Specification: multi-line comments")
("rec" "(rec <variable> <expression>)" "srfi-31.html" "rec" "Specification: syntax of rec")
("rec" "(rec (<variable>+) <body>)" "srfi-31.html" "rec" "Specification: syntax of rec")
("do-ec" "(do-ec <qualifier>* <command>)" "srfi-42.html" "do-ec" "Specification: Comprehensions")
("list-ec" "(list-ec <qualifier>* <expression>)" "srfi-42.html" "list-ec" "Specification: Comprehensions")
("append-ec" "(append-ec <qualifier>* <expression>)" "srfi-42.html" "append-ec" "Specification: Comprehensions")
("string-ec" "(string-ec <qualifier>* <expression>)" "srfi-42.html" "string-ec" "Specification: Comprehensions")
("string-append-ec" "(string-append-ec <qualifier>* <expression>)" "srfi-42.html" "string-append-ec" "Specification: Comprehensions")
("vector-ec" "(vector-ec <qualifier>* <expression>)" "srfi-42.html" "vector-ec" "Specification: Comprehensions")
("vector-of-length-ec" "(vector-of-length-ec <k> <qualifier>* <expression>)" "srfi-42.html" "vector-of-length-ec" "Specification: Comprehensions")
("sum-ec" "(sum-ec <qualifier>* <expression>)" "srfi-42.html" "sum-ec" "Specification: Comprehensions")
("product-ec" "(product-ec <qualifier>* <expression>)" "srfi-42.html" "product-ec" "Specification: Comprehensions")
("min-ec" "(min-ec <qualifier>* <expression>)" "srfi-42.html" "min-ec" "Specification: Comprehensions")
("max-ec" "(max-ec <qualifier>* <expression>)" "srfi-42.html" "max-ec" "Specification: Comprehensions")
("any?-ec" "(any?-ec <qualifier>* <test>)" "srfi-42.html" "any?-ec" "Specification: Comprehensions")
("every?-ec" "(every?-ec <qualifier>* <test>)" "srfi-42.html" "every?-ec" "Specification: Comprehensions")
("first-ec" "(first-ec <default> <qualifier>* <expression>)" "srfi-42.html" "first-ec" "Specification: Comprehensions")
("last-ec" "(last-ec <default> <qualifier>* <expression>)" "srfi-42.html" "last-ec" "Specification: Comprehensions")
("fold-ec" "(fold-ec <x0> <qualifier>* <expression> <f2>)" "srfi-42.html" "fold-ec" "Specification: Comprehensions")
("fold3-ec" "(fold3-ec <x0> <qualifier>* <expression> <f1> <f2>)" "srfi-42.html" "fold3-ec" "Specification: Comprehensions")
("generator" "<generator>" "srfi-42.html" "generator" "Specification: Qualifiers")
("if" "(if <test>)" "srfi-42.html" "if" "Specification: Qualifiers")
("not" "(not <test>)" "srfi-42.html" "not" "Specification: Qualifiers")
("and" "(and <test>*)" "srfi-42.html" "and" "Specification: Qualifiers")
("or" "(or <test>*)" "srfi-42.html" "or" "Specification: Qualifiers")
("begin" "(begin <sequence>)" "srfi-42.html" "begin" "Specification: Qualifiers")
("nested" "(nested <qualifier>*)" "srfi-42.html" "nested" "Specification: Qualifiers")
(":" "(: <vars> <arg1> <arg>)" "srfi-42.html" ":" "Specification: Generators")
(":list" "(:list <vars> <arg1> <arg>*)" "srfi-42.html" ":list" "Specification: Generators")
(":string" "(:string <vars> <arg1> <arg>*)" "srfi-42.html" ":string" "Specification: Generators")
(":vector" "(:vector <vars> <arg1> <arg>*)" "srfi-42.html" ":vector" "Specification: Generators")
(":integers" "(:integers <vars>)" "srfi-42.html" ":integers" "Specification: Generators")
(":range" "(:range <vars> <stop>)" "srfi-42.html" ":range" "Specification: Generators")
(":range" "(:range <vars> <start> <stop>)" "srfi-42.html" ":range" "Specification: Generators")
(":range" "(:range <vars> <start> <stop> <step>)" "srfi-42.html" ":range" "Specification: Generators")
(":real-range" "(:real-range <vars> <stop>)" "srfi-42.html" ":real-range" "Specification: Generators")
(":real-range" "(:real-range <vars> <start> <stop>)" "srfi-42.html" ":real-range" "Specification: Generators")
(":real-range" "(:real-range <vars> <start> <stop> <step>)" "srfi-42.html" ":real-range" "Specification: Generators")
(":char-range" "(:char-range <vars> <min> <max>)" "srfi-42.html" ":char-range" "Specification: Generators")
(":port" "(:port <vars> <port>)" "srfi-42.html" ":port" "Specification: Generators")
(":port" "(:port <vars> <port> <read-proc>)" "srfi-42.html" ":port" "Specification: Generators")
(":dispatched" "(:dispatched <vars> <dispatch> <arg1> <arg>*)" "srfi-42.html" "" "Specification: Generators")
(":generator-proc" "(:generator-proc (g arg1 arg ...)) => g" "srfi-42.html" ":generator-proc" "Specification: Generators")
(":do" "(:do (<lb>*) <ne1?> (<ls>*))" "srfi-42.html" ":do" "Specification: Generators")
(":do" "(:do (let (<ob>*) <oc>*) (<lb>*) <ne1?> (let (<ib>*) <ic>*) <ne2?> (<ls>*))" "srfi-42.html" ":do" "Specification: Generators")
(":let" "(:let <vars> <expression>)" "srfi-42.html" ":let" "Specification: Generators")
(":parallel" "(:parallel <generator>*)" "srfi-42.html" ":parallel" "Specification: Generators")
(":while" "(:while <generator> <expression>)" "srfi-42.html" ":while" "Specification: Generators")
(":until" "(:until <generator> <expression>)" "srfi-42.html" ":until" "Specification: Generators")
)
