(
("type" "NAME" "type.html" #f "type")
("type" "prim-type" "type.html" #f "type")
("name" "a sequence of keyboard characters not including certain characters and not forbidden to use as a name" "name.html" #f "name")
("string" "STRING" "string.html" #f "string")
("boolean" "false" "boolean.html" #f "boolean")
("boolean" "true" "boolean.html" #f "boolean")
("char" "CHARACTER" "char.html" #f "char")
("number" "NUMBER" "number.html" #f "number")
("variable" "NAME" "variable.html" #f "variable")
("parenthesised" "(EXPRESSION)" "parenthesised.html" #f "parenthesised")
("new" "new NAME( EXPRESSION ...)" "new.html" #f "new")
("field-access" "EXPRESSION.NAME" "field-access.html" #f "field-access")
("super.call" "super.NAME( EXPRESSION ...)" "super46call.html" #f "super.call")
("call" "EXPRESSION.NAME( EXPRESSION ...)" "call.html" #f "call")
("this" "this" "this.html" #f "this")
("not" "!EXPRESSION" "not.html" #f "not")
("or" "EXPRESSION || EXPRESSION" "or.html" #f "or")
("and" "EXPRESSION && EXPRESSION" "and.html" #f "and")
("unary" "-EXPRESSION" "unary.html" #f "unary")
("binary-operation" "EXPRESSION OP EXPRESSION" "binary-operation.html" #f "binary-operation")
("return" "return EXPRESSION;" "return.html" #f "return")
("if" "if (EXPRESSION) STATEMENT  else STATEMENT" "if.html" #f "if")
("assignment" "this.NAME = EXPRESSION;" "assignment.html" #f "assignment")
("field" "TYPE NAME;" "field.html" #f "field")
("method" "abstract TYPE NAME  (TYPE NAME, ...); " "method.html" #f "method")
("method" "TYPE NAME  (TYPE NAME, ...) { STATEMENT }" "method.html" #f "method")
("constructor" "NAME (TYPE NAME, ...) { ASSIGNMENT ...} " "constructor.html" #f "constructor")
("constructor" "NAME (TYPE NAME, ...) { super(EXPRESSION , ...);  ASSIGNMENT ...} " "constructor.html" #f "constructor")
("class" "abstract class NAME extends NAME { MEMBER ... }" "class.html" #f "class")
("class" "abstract class NAME { MEMBER ... }" "class.html" #f "class")
("class" "class NAME extends NAME { MEMBER MEMBER ... }" "class.html" #f "class")
("class" "class NAME { MEMBER MEMBER ... }" "class.html" #f "class")
("import" "import QUALIFIED_NAME .*;" "import.html" #f "import")
("import" "import QUALIFIED_NAME ;" "import.html" #f "import")
)
