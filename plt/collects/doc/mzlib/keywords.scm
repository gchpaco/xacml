("make-async-channel" "(make-async-channel [limit-k])" "definitionmake-async-channel")
("async-channel-get" "(async-channel-get async-channel)" "definitionasync-channel-get")
("async-channel-try-get" "(async-channel-try-get async-channel)" "definitionasync-channel-try-get")
("async-channel-put" "(async-channel-put async-channel v)" "definitionasync-channel-put")
("make-async-channel-put-waitable" "(make-async-channel-put-waitable async-channel v)" "definitionmake-async-channel-put-waitable")
("interface" "interface syntax" "definitioninterface")
("object\\%" "object\\%" "definitionobject\\%")
("class*/names" "class*/names syntax" "definitionclass*/names")
("this" "this" "definitionthis")
("super-instantiate" "super-instantiate syntax" "definitionsuper-instantiate")
("super-make-object" "super-make-object" "definitionsuper-make-object")
("super-new" "super-new syntax" "definitionsuper-new")
("class*" "class* syntax" "definitionclass*")
("class" "class syntax" "definitionclass")
("public*" "public* syntax" "definitionpublic*")
("public-final*" "public-final* syntax" "definitionpublic-final*")
("override*" "override* syntax" "definitionoverride*")
("override-final*" "override-final* syntax" "definitionoverride-final*")
("private*" "private* syntax" "definitionprivate*")
("define/public" "define/public syntax" "definitiondefine/public")
("define/public-final" "define/public-final syntax" "definitiondefine/public-final")
("define/override" "define/override syntax" "definitiondefine/override")
("define/override-final" "define/override-final syntax" "definitiondefine/override-final")
("define/private" "define/private syntax" "definitiondefine/private")
("init" "init syntax" "definitioninit")
("init-field" "init-field syntax" "definitioninit-field")
("init-rest" "init-rest syntax" "definitioninit-rest")
("field" "field syntax" "definitionfield")
("init-field" "init-field syntax" "definitioninit-field")
("inherit-field" "inherit-field syntax" "definitioninherit-field")
("public" "public syntax" "definitionpublic")
("override" "override syntax" "definitionoverride")
("public-final" "public-final syntax" "definitionpublic-final")
("override-final" "override-final syntax" "definitionoverride-final")
("private" "private syntax" "definitionprivate")
("inherit" "inherit syntax" "definitioninherit")
("rename" "rename syntax" "definitionrename")
("define-local-member-name" "define-local-member-name syntax" "definitiondefine-local-member-name")
("make-object" "(make-object class init-v ...)" "definitionmake-object")
("new" "new syntax" "definitionnew")
("instantiate" "instantiate syntax" "definitioninstantiate")
("send" "send syntax" "definitionsend")
("send/apply" "send/apply syntax" "definitionsend/apply")
("send*" "send* syntax" "definitionsend*")
("with-method" "with-method syntax" "definitionwith-method")
("get-field" "get-field syntax" "definitionget-field")
("field-bound?" "field-bound? syntax" "definitionfield-bound?")
("field-names" "(field-names object)" "definitionfield-names")
("class-field-accessor" "class-field-accessor syntax" "definitionclass-field-accessor")
("class-field-mutator" "class-field-mutator syntax" "definitionclass-field-mutator")
("generic" "generic syntax" "definitiongeneric")
("make-generic" "(make-generic class-or-interface symbol)" "definitionmake-generic")
("send-generic" "send-generic keyword" "definitionsend-generic")
("object?" "(object? v)" "definitionobject?")
("class?" "(class? v)" "definitionclass?")
("interface?" "(interface? v)" "definitioninterface?")
("object=?" "(object=? object [object])" "definitionobject=?")
("object->vector" "(object->vector object [opaque-v])" "definitionobject->vector")
("class->interface" "(class->interface class)" "definitionclass->interface")
("object-interface" "(object-interface object)" "definitionobject-interface")
("is-a?" "(is-a? v interface)" "definitionis-a?")
("is-a?" "(is-a? v class)" "definitionis-a?")
("subclass?" "(subclass? v class)" "definitionsubclass?")
("implementation?" "(implementation? v interface)" "definitionimplementation?")
("interface-extension?" "(interface-extension? v interface)" "definitioninterface-extension?")
("method-in-interface?" "(method-in-interface? symbol interface)" "definitionmethod-in-interface?")
("interface->method-names" "(interface->method-names interface)" "definitioninterface->method-names")
("object-info" "(object-info object)" "definitionobject-info")
("class-info" "(class-info class)" "definitionclass-info")
("class100" "class100 syntax" "definitionclass100")
("class100*" "class100* syntax" "definitionclass100*")
("class100*/names" "class100*/names syntax" "definitionclass100*/names")
("class100*/names" "class100*/names syntax" "definitionclass100*/names")
("class100*" "class100* syntax" "definitionclass100*")
("class100" "class100 syntax" "definitionclass100")
("class100-asi" "class100-asi syntax" "definitionclass100-asi")
("class100*-asi" "class100*-asi syntax" "definitionclass100*-asi")
("make-compilation-manager-load/use-compiled-handler" "(make-compilation-manager-load/use-compiled-handler)" "definitionmake-compilation-manager-load/use-compiled-handler")
("managed-compile-zo" "(managed-compile-zo file)" "definitionmanaged-compile-zo")
("manager-trace-handler" "(manager-trace-handler proc [procedure])" "definitionmanager-trace-handler")
("trust-existing-zos" "(trust-existing-zos on? [procedure])" "definitiontrust-existing-zos")
("make-caching-managed-compile-zo" "(make-caching-managed-compile-zo)" "definitionmake-caching-managed-compile-zo")
("manager-compile-notify-handler" "(manager-compile-notify-handler [notify-proc])" "definitionmanager-compile-notify-handler")
("manager-trace-handler" "(manager-trace-handler [notify-proc])" "definitionmanager-trace-handler")
("register-external-file" "(register-external-file file)" "definitionregister-external-file")
("command-line" "command-line syntax" "definitioncommand-line")
("parse-command-line" "(parse-command-line progname argv table finish-proc arg-help [help-proc unknown-proc])" "definitionparse-command-line")
("spawn" "(spawn thunk)" "definitionspawn")
("sync" "(sync waitable)" "definitionsync")
("sync/enable-break" "(sync/enable-break waitable)" "definitionsync/enable-break")
("channel" "(channel)" "definitionchannel")
("channel-recv-evt" "(channel-recv-evt channel)" "definitionchannel-recv-evt")
("channel-send-evt" "(channel-send-evt channel v)" "definitionchannel-send-evt")
("choice-evt" "(choice-evt waitable ...)" "definitionchoice-evt")
("wrap-evt" "(wrap-evt waitable proc)" "definitionwrap-evt")
("guard-evt" "(guard-evt thunk)" "definitionguard-evt")
("nack-guard-evt" "(nack-guard-evt proc)" "definitionnack-guard-evt")
("thread-done-evt" "(thread-done-evt thread)" "definitionthread-done-evt")
("current-time" "(current-time)" "definitioncurrent-time")
("time-evt" "(time-evt k)" "definitiontime-evt")
("atom?" "(atom? v)" "definitionatom?")
("define-structure" "define-structure syntax" "definitiondefine-structure")
("define-structure" "define-structure syntax" "definitiondefine-structure")
("getprop" "(getprop sym property default)" "definitiongetprop")
("new-cafe" "(new-cafe [eval-handler])" "definitionnew-cafe")
("putprop" "(putprop sym property value)" "definitionputprop")
("sort" "(sort less-than?-proc list)" "definitionsort")
("compile-file" "(compile-file src [dest filter])" "definitioncompile-file")
("flat-contract" "(flat-contract predicate)" "definitionflat-contract")
("flat-named-contract" "(flat-named-contract type-name predicate)" "definitionflat-named-contract")
("any?" "any?" "definitionany?")
("union" "(union contract ...)" "definitionunion")
("and/c" "(and/c contract ...)" "definitionand/c")
("not/f" "(not/f flat-contract)" "definitionnot/f")
(">=/c" "(>=/c number)" "definition>=/c")
("<=/c" "(<=/c number)" "definition<=/c")
(">/c" "(>/c number)" "definition>/c")
("</c" "(</c number)" "definition</c")
("integer-in" "(integer-in number number)" "definitioninteger-in")
("real-in" "(real-in number number)" "definitionreal-in")
("natural-number?" "natural-number?" "definitionnatural-number?")
("string/len" "(string/len number)" "definitionstring/len")
("false?" "false?" "definitionfalse?")
("printable?" "printable?" "definitionprintable?")
("symbols" "(symbols symbol ...1)" "definitionsymbols")
("is-a?/c" "(is-a?/c class-or-interface)" "definitionis-a?/c")
("implementation?/c" "(implementation?/c interface)" "definitionimplementation?/c")
("subclass?/c" "(subclass?/c class)" "definitionsubclass?/c")
("listof" "(listof flat-contract)" "definitionlistof")
("list-immutableof" "(list-immutableof contract)" "definitionlist-immutableof")
("vectorof" "(vectorof flat-contract)" "definitionvectorof")
("vector-immutableof" "(vector-immutableof contract)" "definitionvector-immutableof")
("vector/p" "(vector/p flat-contract ...)" "definitionvector/p")
("vector-immutable/c" "(vector-immutable/c contract ...)" "definitionvector-immutable/c")
("box/p" "(box/p flat-contract)" "definitionbox/p")
("box-immutable/c" "(box-immutable/c contract)" "definitionbox-immutable/c")
("cons/p" "(cons/p flat-contract flat-contract)" "definitioncons/p")
("cons-immutable/c" "(cons-immutable/c contract contract)" "definitioncons-immutable/c")
("list/p" "(list/p flat-contract ...)" "definitionlist/p")
("list-immutable/c" "(list-immutable/c flat-contract ...)" "definitionlist-immutable/c")
("flat-rec-contract" "flat-rec-contract syntax" "definitionflat-rec-contract")
("flat-murec-contract" "flat-murec-contract syntax" "definitionflat-murec-contract")
("anaphoric-contracts" "(anaphoric-contracts)" "definitionanaphoric-contracts")
("anaphoric-contracts" "(anaphoric-contracts 'equal)" "definitionanaphoric-contracts")
("->" "-> syntax" "definition->")
("->" "-> syntax" "definition->")
("->*" "->* syntax" "definition->*")
("->*" "->* syntax" "definition->*")
("->*" "->* syntax" "definition->*")
("->*" "->* syntax" "definition->*")
("->d" "->d syntax" "definition->d")
("->d*" "->d* syntax" "definition->d*")
("->d*" "->d* syntax" "definition->d*")
("->r" "->r syntax" "definition->r")
("->r" "->r syntax" "definition->r")
("->r" "->r syntax" "definition->r")
("->r" "->r syntax" "definition->r")
("->r" "->r syntax" "definition->r")
("->r" "->r syntax" "definition->r")
("case->" "case-> syntax" "definitioncase->")
("opt->" "opt-> syntax" "definitionopt->")
("opt->*" "opt->* syntax" "definitionopt->*")
("opt->*" "opt->* syntax" "definitionopt->*")
("mixin-contract" "mixin-contract" "definitionmixin-contract")
("make-mixin-contract" "(make-mixin-contract class-or-interface ...)" "definitionmake-mixin-contract")
("provide/contract" "provide/contract syntax" "definitionprovide/contract")
("define/contract" "define/contract syntax" "definitiondefine/contract")
("contract" "contract syntax" "definitioncontract")
("contract" "contract syntax" "definitioncontract")
("contract?" "contract?" "definitioncontract?")
("flat-contract?" "flat-contract?" "definitionflat-contract?")
("flat-contract-predicate" "(flat-contract-predicate value)" "definitionflat-contract-predicate")
("date->string" "(date->string date [time?])" "definitiondate->string")
("date-display-format" "(date-display-format [format-symbol])" "definitiondate-display-format")
("find-seconds" "(find-seconds second minute hour day month year)" "definitionfind-seconds")
("date->julian/scalinger" "(date->julian/scalinger date)" "definitiondate->julian/scalinger")
("julian/scalinger->string" "(julian/scalinger->string date)" "definitionjulian/scalinger->string")
("gzip" "(gzip in-filename [out-filename])" "definitiongzip")
("gzip-through-ports" "(gzip-through-ports in out orig-filename timestamp)" "definitiongzip-through-ports")
("deflate" "(deflate in out)" "definitiondeflate")
("define-macro" "define-macro syntax" "definitiondefine-macro")
("define-macro" "define-macro syntax" "definitiondefine-macro")
("defmacro" "defmacro syntax" "definitiondefmacro")
("boolean=?" "(boolean=? bool1 bool2)" "definitionboolean=?")
("build-list" "(build-list n f)" "definitionbuild-list")
("build-string" "(build-string n f)" "definitionbuild-string")
("build-vector" "(build-vector n f)" "definitionbuild-vector")
("compose" "(compose f ...1)" "definitioncompose")
("define-syntax-set" "define-syntax-set syntax" "definitiondefine-syntax-set")
("evcase" "evcase syntax" "definitionevcase")
("false" "false" "definitionfalse")
("identity" "(identity v)" "definitionidentity")
("let+" "let+ syntax" "definitionlet+")
("local" "local syntax" "definitionlocal")
("loop-until" "(loop-until start done? next f)" "definitionloop-until")
("namespace-defined?" "(namespace-defined? symbol)" "definitionnamespace-defined?")
("nand" "nand syntax" "definitionnand")
("nor" "nor syntax" "definitionnor")
("opt-lambda" "opt-lambda syntax" "definitionopt-lambda")
("recur" "recur syntax" "definitionrecur")
("rec" "rec syntax" "definitionrec")
("symbol=?" "(symbol=? symbol1 symbol2)" "definitionsymbol=?")
("this-expression-source-directory" "this-expression-source-directory syntax" "definitionthis-expression-source-directory")
("true" "true" "definitiontrue")
("hash-table" "hash-table syntax" "definitionhash-table")
("build-absolute-path" "(build-absolute-path base path ...)" "definitionbuild-absolute-path")
("build-relative-path" "(build-relative-path base path ...)" "definitionbuild-relative-path")
("call-with-input-file*" "(call-with-input-file* pathname proc flag-symbol ...)" "definitioncall-with-input-file*")
("call-with-output-file*" "(call-with-output-file* pathname proc flag-symbol ...)" "definitioncall-with-output-file*")
("copy-directory/files" "(copy-directory/files src-path dest-path)" "definitioncopy-directory/files")
("delete-directory/files" "(delete-directory/files path)" "definitiondelete-directory/files")
("explode-path" "(explode-path path)" "definitionexplode-path")
("file-name-from-path" "(file-name-from-path path)" "definitionfile-name-from-path")
("filename-extension" "(filename-extension path)" "definitionfilename-extension")
("find-files" "(find-files predicate [start-pathname])" "definitionfind-files")
("find-library" "(find-library name collection)" "definitionfind-library")
("find-relative-path" "(find-relative-path basepath path)" "definitionfind-relative-path")
("fold-files" "(fold-files proc init-val [start-pathname follow-links?])" "definitionfold-files")
("get-preference" "(get-preference name [failure-thunk flush-cache? filename])" "definitionget-preference")
("make-directory*" "(make-directory* path)" "definitionmake-directory*")
("make-temporary-file" "(make-temporary-file [format-string copy-from-filename directory])" "definitionmake-temporary-file")
("normalize-path" "(normalize-path path wrt)" "definitionnormalize-path")
("path-only" "(path-only path)" "definitionpath-only")
("put-preferences" "(put-preferences name-list val-list [locked-proc filename])" "definitionput-preferences")
("include" "include syntax" "definitioninclude")
("include-at/relative-to" "include-at/relative-to syntax" "definitioninclude-at/relative-to")
("include-at/relative-to/reader" "include-at/relative-to/reader syntax" "definitioninclude-at/relative-to/reader")
("include/reader" "include/reader syntax" "definitioninclude/reader")
("gunzip" "(gunzip file [output-name-filter])" "definitiongunzip")
("gunzip-through-ports" "(gunzip-through-ports in out)" "definitiongunzip-through-ports")
("inflate" "(inflate in out)" "definitioninflate")
("assf" "(assf f l)" "definitionassf")
("cons?" "(cons? v)" "definitioncons?")
("empty" "empty" "definitionempty")
("empty?" "(empty? v)" "definitionempty?")
("filter" "(filter f l)" "definitionfilter")
("first" "(first l)" "definitionfirst")
("foldl" "(foldl f init l ...1)" "definitionfoldl")
("foldr" "(foldr f init l ...1)" "definitionfoldr")
("last-pair" "(last-pair list)" "definitionlast-pair")
("memf" "(memf f l)" "definitionmemf")
("mergesort" "(mergesort list less-than?)" "definitionmergesort")
("quicksort" "(quicksort list less-than?)" "definitionquicksort")
("remove" "(remove item list [equal?])" "definitionremove")
("remove*" "(remove* items list [equal?])" "definitionremove*")
("remq" "(remq item list)" "definitionremq")
("remq*" "(remq* items list)" "definitionremq*")
("remv" "(remv item list)" "definitionremv")
("remv*" "(remv* items list)" "definitionremv*")
("rest" "(rest l)" "definitionrest")
("set-first!" "(set-first! l v)" "definitionset-first!")
("set-rest!" "(set-rest! l1 l2)" "definitionset-rest!")
("match" "match syntax" "definitionmatch")
("match-lambda" "match-lambda syntax" "definitionmatch-lambda")
("match-lambda*" "match-lambda* syntax" "definitionmatch-lambda*")
("match-let" "match-let syntax" "definitionmatch-let")
("match-let*" "match-let* syntax" "definitionmatch-let*")
("match-letrec" "match-letrec syntax" "definitionmatch-letrec")
("match-define" "match-define syntax" "definitionmatch-define")
("conjugate" "(conjugate z)" "definitionconjugate")
("cosh" "(cosh z)" "definitioncosh")
("e" "e" "definitione")
("pi" "pi" "definitionpi")
("sinh" "(sinh z)" "definitionsinh")
("sgn" "(sgn n)" "definitionsgn")
("sqr" "(sqr z)" "definitionsqr")
("package" "package syntax" "definitionpackage")
("package" "package syntax" "definitionpackage")
("package*" "package* syntax" "definitionpackage*")
("package*" "package* syntax" "definitionpackage*")
("open" "open syntax" "definitionopen")
("open*" "open* syntax" "definitionopen*")
("dot" "dot syntax" "definitiondot")
("define-dot" "define-dot syntax" "definitiondefine-dot")
("define*-dot" "define*-dot syntax" "definitiondefine*-dot")
("rename-potential-package" "rename-potential-package syntax" "definitionrename-potential-package")
("define*" "define* syntax" "definitiondefine*")
("define*" "define* syntax" "definitiondefine*")
("define*-syntax" "define*-syntax syntax" "definitiondefine*-syntax")
("define*-syntax" "define*-syntax syntax" "definitiondefine*-syntax")
("define*-values" "define*-values syntax" "definitiondefine*-values")
("define*-syntaxes" "define*-syntaxes syntax" "definitiondefine*-syntaxes")
("rename*-potential-package" "rename*-potential-package syntax" "definitionrename*-potential-package")
("package/derived" "package/derived syntax" "definitionpackage/derived")
("package/derived" "package/derived syntax" "definitionpackage/derived")
("open/derived" "open/derived syntax" "definitionopen/derived")
("open*/derived" "open*/derived syntax" "definitionopen*/derived")
("abbreviate-cons-as-list" "(abbreviate-cons-as-list [abbreviate?])" "definitionabbreviate-cons-as-list")
("booleans-as-true/false" "(booleans-as-true/false [use-name?])" "definitionbooleans-as-true/false")
("use-named/undefined-handler" "(use-named/undefined-handler [use-handler])" "definitionuse-named/undefined-handler")
("use-named/undefined-handler" "(use-named/undefined-handler [use-handler])" "definitionuse-named/undefined-handler")
("build-share" "(build-share v)" "definitionbuild-share")
("constructor-style-printing" "(constructor-style-printing [use-constructors?])" "definitionconstructor-style-printing")
("current-build-share-hook" "(current-build-share-hook [hook])" "definitioncurrent-build-share-hook")
("current-build-share-name-hook" "(current-build-share-name-hook [hook])" "definitioncurrent-build-share-name-hook")
("current-print-convert-hook" "(current-print-convert-hook [hook])" "definitioncurrent-print-convert-hook")
("current-read-eval-convert-print-prompt" "(current-read-eval-convert-print-prompt [str])" "definitioncurrent-read-eval-convert-print-prompt")
("get-shared" "(get-shared share-info [cycles-only?])" "definitionget-shared")
("install-converting-printer" "(install-converting-printer)" "definitioninstall-converting-printer")
("print-convert" "(print-convert v [cycles-only?])" "definitionprint-convert")
("print-convert-expr" "(print-convert-expr share-info v unroll-once?)" "definitionprint-convert-expr")
("quasi-read-style-printing" "(quasi-read-style-printing [on?])" "definitionquasi-read-style-printing")
("show-sharing" "(show-sharing [show?])" "definitionshow-sharing")
("whole/fractional-exact-numbers" "(whole/fractional-exact-numbers [whole-frac?])" "definitionwhole/fractional-exact-numbers")
("pregexp" "(pregexp U-regexp)" "definitionpregexp")
("pregexp-match-positions" "(pregexp-match-positions regexp text-string [start end])" "definitionpregexp-match-positions")
("pregexp-match" "(pregexp-match regexp text-string [start end])" "definitionpregexp-match")
("pregexp-split" "(pregexp-split regexp text-string)" "definitionpregexp-split")
("pregexp-replace" "(pregexp-replace regexp text-string insert-string)" "definitionpregexp-replace")
("pregexp-replace*" "(pregexp-replace* regexp text-string insert-string)" "definitionpregexp-replace*")
("pregexp-quote" "(pregexp-quote string)" "definitionpregexp-quote")
("pretty-display" "(pretty-display v [port])" "definitionpretty-display")
("pretty-print" "(pretty-print v [port])" "definitionpretty-print")
("pretty-print-current-style-table" "(pretty-print-current-style-table style-table [procedure])" "definitionpretty-print-current-style-table")
("pretty-print-columns" "(pretty-print-columns [width])" "definitionpretty-print-columns")
("pretty-print-depth" "(pretty-print-depth [depth])" "definitionpretty-print-depth")
("pretty-print-display-string-handler" "(pretty-print-display-string-handler [f])" "definitionpretty-print-display-string-handler")
("pretty-print-exact-as-decimal" "(pretty-print-exact-as-decimal [as-decimal?])" "definitionpretty-print-exact-as-decimal")
("pretty-print-extend-style-table" "(pretty-print-extend-style-table style-table symbol-list like-symbol-list)" "definitionpretty-print-extend-style-table")
("pretty-print-handler" "(pretty-print-handler v)" "definitionpretty-print-handler")
("pretty-print-print-hook" "(pretty-print-print-hook [hook])" "definitionpretty-print-print-hook")
("pretty-print-print-line" "(pretty-print-print-line [liner])" "definitionpretty-print-print-line")
("pretty-print-show-inexactness" "(pretty-print-show-inexactness [explicit?])" "definitionpretty-print-show-inexactness")
("pretty-print-style-table?" "(pretty-print-style-table? v)" "definitionpretty-print-style-table?")
("pretty-print-post-print-hook" "(pretty-print-post-print-hook [hook])" "definitionpretty-print-post-print-hook")
("pretty-print-pre-print-hook" "(pretty-print-pre-print-hook [hook])" "definitionpretty-print-pre-print-hook")
("pretty-print-size-hook" "(pretty-print-size-hook [hook])" "definitionpretty-print-size-hook")
("pretty-print-.-symbol-without-bars" "(pretty-print-.-symbol-without-bars [bool])" "definitionpretty-print-.-symbol-without-bars")
("system" "(system command-string)" "definitionsystem")
("system*" "(system* command-string arg-string ...)" "definitionsystem*")
("system/exit-code" "(system/exit-code command-string)" "definitionsystem/exit-code")
("system*/exit-code" "(system*/exit-code command-string)" "definitionsystem*/exit-code")
("process" "(process command-string)" "definitionprocess")
("process*" "(process* command-string arg-string ...)" "definitionprocess*")
("process/ports" "(process/ports output-port input-port error-output-port\n command-string)" "definitionprocess/ports")
("process*/ports" "(process*/ports output-port input-port error-output-port\n command-string arg-string ...)" "definitionprocess*/ports")
("restart-mzscheme" "(restart-mzscheme init-argv adjust-flag-table argv init-namespace)" "definitionrestart-mzscheme")
("send-event" "(send-event receiver-byte-string event-class-byte-string event-id-byte-string [direct-argument-v argument-list])" "definitionsend-event")
("shared" "shared syntax" "definitionshared")
("eval-string" "(eval-string str [err-display err-result])" "definitioneval-string")
("expr->string" "(expr->string expr)" "definitionexpr->string")
("read-from-string" "(read-from-string str [err-display err-result])" "definitionread-from-string")
("read-from-string-all" "(read-from-string-all str [err-display err-result])" "definitionread-from-string-all")
("regexp-match*" "(regexp-match* pattern string-or-input-port [start-k end-k])" "definitionregexp-match*")
("regexp-match/fail-without-reading" "(regexp-match/fail-without-reading pattern input-port [start-k end-k output-port])" "definitionregexp-match/fail-without-reading")
("regexp-match-exact?" "(regexp-match-exact? pattern string-or-input-port)" "definitionregexp-match-exact?")
("regexp-match-peek-positions*" "(regexp-match-peek-positions* pattern input-port [start-k end-k])" "definitionregexp-match-peek-positions*")
("regexp-match-positions*" "(regexp-match-positions* pattern string-or-input-port [start-k end-k])" "definitionregexp-match-positions*")
("regexp-quote" "(regexp-quote str [case-sensitive?])" "definitionregexp-quote")
("regexp-replace-quote" "(regexp-replace-quote str)" "definitionregexp-replace-quote")
("regexp-split" "(regexp-split pattern string-or-input-port [start-k end-k])" "definitionregexp-split")
("string-lowercase!" "(string-lowercase! str)" "definitionstring-lowercase!")
("string-uppercase!" "(string-uppercase! str)" "definitionstring-uppercase!")
("surrogate" "(surrogate (method-name arg-spec ...) ...)" "definitionsurrogate")
("consumer-thread" "(consumer-thread f [init])" "definitionconsumer-thread")
("copy-port" "(copy-port input-port output-port ...1)" "definitioncopy-port")
("dynamic-disable-break" "(dynamic-disable-break thunk)" "definitiondynamic-disable-break")
("dynamic-enable-break" "(dynamic-enable-break thunk)" "definitiondynamic-enable-break")
("input-port-append" "(input-port-append close-at-eof? input-port ...)" "definitioninput-port-append")
("make-limited-input-port" "(make-limited-input-port input-port limit-k [close-orig?])" "definitionmake-limited-input-port")
("make-single-threader" "(make-single-threader)" "definitionmake-single-threader")
("merge-input" "(merge-input a-input-port b-input-port [limit-k])" "definitionmerge-input")
("run-server" "(run-server port-k session-proc session-timeout [handler-proc listen-proc close-proc accept-proc accept/break-proc])" "definitionrun-server")
("with-semaphore" "(with-semaphore s thunk)" "definitionwith-semaphore")
("trace" "(trace name ...)" "definitiontrace")
("untrace" "(untrace name ...)" "definitionuntrace")
("unit" "unit syntax" "definitionunit")
("import" "import keyword" "definitionimport")
("export" "export keyword" "definitionexport")
("invoke-unit" "invoke-unit syntax" "definitioninvoke-unit")
("define-values/invoke-unit" "define-values/invoke-unit syntax" "definitiondefine-values/invoke-unit")
("namespace-variable-bind/invoke-unit" "namespace-variable-bind/invoke-unit syntax" "definitionnamespace-variable-bind/invoke-unit")
("compound-unit" "compound-unit syntax" "definitioncompound-unit")
("import" "import keyword" "definitionimport")
("link" "link keyword" "definitionlink")
("export" "export keyword" "definitionexport")
("unit?" "(unit? v)" "definitionunit?")
("unit/sig" "unit/sig syntax" "definitionunit/sig")
("define-signature" "define-signature syntax" "definitiondefine-signature")
("unit/sig" "unit/sig syntax" "definitionunit/sig")
("rename" "rename keyword" "definitionrename")
("compound-unit/sig" "compound-unit/sig syntax" "definitioncompound-unit/sig")
("compound-unit/sig" "compound-unit/sig syntax" "definitioncompound-unit/sig")
("invoke-unit/sig" "invoke-unit/sig syntax" "definitioninvoke-unit/sig")
("define-values/invoke-unit/sig" "define-values/invoke-unit/sig syntax" "definitiondefine-values/invoke-unit/sig")
("namespace-variable-bind/invoke-unit/sig" "namespace-variable-bind/invoke-unit/sig syntax" "definitionnamespace-variable-bind/invoke-unit/sig")
("provide-signature-elements" "provide-signature-elements syntax" "definitionprovide-signature-elements")
("unit/sig->unit" "unit/sig->unit syntax" "definitionunit/sig->unit")
("unit->unit/sig" "unit->unit/sig syntax" "definitionunit->unit/sig")
("signed-unit?" "signed-unit?" "definitionsigned-unit?")
("signed-unit-unit" "signed-unit-unit" "definitionsigned-unit-unit")
("signed-unit-imports" "signed-unit-imports" "definitionsigned-unit-imports")
("signed-unit-exports" "signed-unit-exports" "definitionsigned-unit-exports")
("verify-signature-match" "(verify-signature-match where exact? dest-context dest-sig\n src-context src-sig)" "definitionverify-signature-match")
("verify-linkage-signature-match" "(verify-linkage-signature-match where tags units\n export-sigs linking-sigs)" "definitionverify-linkage-signature-match")
("signature->symbols" "signature->symbols syntax" "definitionsignature->symbols")
