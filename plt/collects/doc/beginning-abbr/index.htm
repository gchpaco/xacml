<html><head><title>Beginning Student with List Abbreviations Language</title><h1>Beginning Student with List Abbreviations Language</h1></head><body><p><ul><li><b>PROGRAM</b><ul><li><b>DEF-OR-EXP</b> ...</li></ul></li><li><b>DEF-OR-EXP</b><ul><li><b>DEFINITION</b></li><li><b>EXPRESSION</b></li></ul></li><li><b>DEFINITION</b><ul><li><a href="define.html"><code class="scheme">(<code class="scheme"><span class="keyword">define</span></code> (<b>NAME</b> <b>NAME</b> <b>NAME</b> ...) <b>EXPRESSION</b>)</code></a></li><li><a href="define.html"><code class="scheme">(<code class="scheme"><span class="keyword">define</span></code> <b>NAME</b> <b>EXPRESSION</b>)</code></a></li><li><a href="define.html"><code class="scheme">(<code class="scheme"><span class="keyword">define</span></code> <b>NAME</b> (<code class="scheme"><span class="keyword">lambda</span></code> (<b>NAME</b> <b>NAME</b> ...) <b>EXPRESSION</b>))</code> </a></li><li><a href="define-struct.html"><code class="scheme">(<code class="scheme"><span class="keyword">define-struct</span></code> <b>NAME</b> (<b>NAME</b> ...))</code> </a></li></ul></li><li><b>EXPRESSION</b><ul><li><a href="application.html"><code class="scheme">(<b>NAME</b> <b>EXPRESSION</b> <b>EXPRESSION</b> ...)</code></a></li><li><a href="primitives.html"><code class="scheme">(<b>PRIM-OP</b> <b>EXPRESSION</b> ...)</code></a></li><li><a href="cond.html"><code class="scheme">(<code class="scheme"><span class="keyword">cond</span></code> (<b>EXPRESSION</b> <b>EXPRESSION</b>) (<b>EXPRESSION</b> <b>EXPRESSION</b>) ...)</code></a></li><li><a href="cond.html"><code class="scheme">(<code class="scheme"><span class="keyword">cond</span></code> (<b>EXPRESSION</b> <b>EXPRESSION</b>) ...   (<code class="scheme"><span class="keyword">else</span></code> <b>EXPRESSION</b>))</code></a></li><li><a href="if.html"><code class="scheme">(<code class="scheme"><span class="keyword">if</span></code> <b>EXPRESSION</b> <b>EXPRESSION</b> <b>EXPRESSION</b>)</code></a></li><li><a href="and.html"><code class="scheme">(<code class="scheme"><span class="keyword">and</span></code> <b>EXPRESSION</b>   <b>EXPRESSION</b> <b>EXPRESSION</b> ...)</code></a></li><li><a href="or.html"><code class="scheme">(<code class="scheme"><span class="keyword">or</span></code> <b>EXPRESSION</b>   <b>EXPRESSION</b> <b>EXPRESSION</b> ...)</code></a></li><li><a href="empty.html"><code class="scheme">empty</code></a></li><li><a href="variable.html"><code class="scheme"><b>NAME</b></code></a></li><li><a href="quote.html"><code class="scheme">'</code><b>QUOTED</b></a></li><li><a href="quasiquote.html"><code class="scheme"><span class="keyword">`</span></code><b>QUASIQUOTED</b></a></li><li><a href="number.html"><b>NUMBER</b></a></li><li><a href="boolean.html"><code class="scheme">true</code></a></li><li><a href="boolean.html"><code class="scheme">false</code></a></li><li><a href="string.html"><b>STRING</b></a></li><li><a href="character.html"><b>CHARACTER</b></a></li></ul></li><li><b>NAME</b><ul><li> a sequence of keyboard characters not including: space " , ' ` ( ) [ ] { } | ; # </li></ul></li><li><b>QUOTED</b><ul><li><a href="symbol.html"><code class="scheme">NAME</code></a></li><li><a href="quoted-number.html"><b>NUMBER</b></a></li><li><a href="quoted-string.html"><b>STRING</b></a></li><li><a href="quoted-character.html"><b>CHARACTER</b></a></li><li><a href="quoted-list.html">(<b>QUOTED</b> ...)</a></li><li><a href="quoted-quote.html"><code class="scheme">'</code><b>QUOTED</b></a></li><li><a href="quoted-quasiquote.html"><code class="scheme">`</code><b>QUOTED</b></a></li><li><a href="quoted-unquote.html"><code class="scheme">,</code><b>QUOTED</b></a></li><li><a href="quoted-unquote-splicing.html"><code class="scheme">,@</code><b>QUOTED</b></a></li></ul></li><li><b>QUASIQUOTED</b><ul><li><a href="symbol.html"><code class="scheme">NAME</code></a></li><li><a href="quasiquoted-number.html"><b>NUMBER</b></a></li><li><a href="quasiquoted-string.html"><b>STRING</b></a></li><li><a href="quasiquoted-character.html"><b>CHARACTER</b></a></li><li><a href="quasiquoted-list.html">(<b>QUASIQUOTED</b> ...)</a></li><li><a href="quasiquoted-quote.html"><code class="scheme">'</code><b>QUASIQUOTED</b></a></li><li><a href="quasiquoted-quasiquote.html"><code class="scheme">`</code><b>QUASIQUOTED</b></a></li><li><a href="unquote.html"><code class="scheme">,</code><b>EXPRESSION</b></a></li><li><a href="unquote-splicing.html"><code class="scheme">,@</code><b>EXPRESSION</b></a></li></ul></li><li><b>PRIM-OP</b>s<ul><li><i>Numbers: Integers, Rationals, Reals, Complex, Exacts, Inexacts</i><ul><li><a href="42.html"><tt>*</tt></a> : <tt>(num num num ... -&gt; num)</tt></li><li><a href="43.html"><tt>+</tt></a> : <tt>(num num num ... -&gt; num)</tt></li><li><a href="-.html"><tt>-</tt></a> : <tt>(num num ... -&gt; num)</tt></li><li><a href="47.html"><tt>/</tt></a> : <tt>(num num num ... -&gt; num)</tt></li><li><a href="60.html"><tt>&lt;</tt></a> : <tt>(real real real ... -&gt; boolean)</tt></li><li><a href="6061.html"><tt>&lt;=</tt></a> : <tt>(real real real ... -&gt; boolean)</tt></li><li><a href="61.html"><tt>=</tt></a> : <tt>(num num num ... -&gt; boolean)</tt></li><li><a href="62.html"><tt>&gt;</tt></a> : <tt>(real real real ... -&gt; boolean)</tt></li><li><a href="6261.html"><tt>&gt;=</tt></a> : <tt>(real real ... -&gt; boolean)</tt></li><li><a href="abs.html"><tt>abs</tt></a> : <tt>(real -&gt; real)</tt></li><li><a href="acos.html"><tt>acos</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="add1.html"><tt>add1</tt></a> : <tt>(number -&gt; number)</tt></li><li><a href="angle.html"><tt>angle</tt></a> : <tt>(num -&gt; real)</tt></li><li><a href="asin.html"><tt>asin</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="atan.html"><tt>atan</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="ceiling.html"><tt>ceiling</tt></a> : <tt>(real -&gt; int)</tt></li><li><a href="complex63.html"><tt>complex?</tt></a> : <tt>(any -&gt; bool)</tt></li><li><a href="conjugate.html"><tt>conjugate</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="cos.html"><tt>cos</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="cosh.html"><tt>cosh</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="current-seconds.html"><tt>current-seconds</tt></a> : <tt>(-&gt; int)</tt></li><li><a href="denominator.html"><tt>denominator</tt></a> : <tt>(rat -&gt; int)</tt></li><li><a href="e.html"><tt>e</tt></a> : <tt>real</tt></li><li><a href="even63.html"><tt>even?</tt></a> : <tt>(integer -&gt; bool)</tt></li><li><a href="exact-62inexact.html"><tt>exact-&gt;inexact</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="exact63.html"><tt>exact?</tt></a> : <tt>(num -&gt; bool)</tt></li><li><a href="exp.html"><tt>exp</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="expt.html"><tt>expt</tt></a> : <tt>(num num -&gt; num)</tt></li><li><a href="floor.html"><tt>floor</tt></a> : <tt>(real -&gt; int)</tt></li><li><a href="gcd.html"><tt>gcd</tt></a> : <tt>(int int ... -&gt; int)</tt></li><li><a href="imag-part.html"><tt>imag-part</tt></a> : <tt>(num -&gt; real)</tt></li><li><a href="inexact-62exact.html"><tt>inexact-&gt;exact</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="inexact63.html"><tt>inexact?</tt></a> : <tt>(num -&gt; bool)</tt></li><li><a href="integer-62char.html"><tt>integer-&gt;char</tt></a> : <tt>(int -&gt; char)</tt></li><li><a href="integer63.html"><tt>integer?</tt></a> : <tt>(any -&gt; bool)</tt></li><li><a href="lcm.html"><tt>lcm</tt></a> : <tt>(int int ... -&gt; int)</tt></li><li><a href="log.html"><tt>log</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="magnitude.html"><tt>magnitude</tt></a> : <tt>(num -&gt; real)</tt></li><li><a href="make-polar.html"><tt>make-polar</tt></a> : <tt>(real real -&gt; num)</tt></li><li><a href="max.html"><tt>max</tt></a> : <tt>(real real ... -&gt; real)</tt></li><li><a href="min.html"><tt>min</tt></a> : <tt>(real real ... -&gt; real)</tt></li><li><a href="modulo.html"><tt>modulo</tt></a> : <tt>(int int -&gt; int)</tt></li><li><a href="negative63.html"><tt>negative?</tt></a> : <tt>(number -&gt; bool)</tt></li><li><a href="number-62string.html"><tt>number-&gt;string</tt></a> : <tt>(num -&gt; string)</tt></li><li><a href="number63.html"><tt>number?</tt></a> : <tt>(any -&gt; boolean)</tt></li><li><a href="numerator.html"><tt>numerator</tt></a> : <tt>(rat -&gt; int)</tt></li><li><a href="odd63.html"><tt>odd?</tt></a> : <tt>(integer -&gt; bool)</tt></li><li><a href="pi.html"><tt>pi</tt></a> : <tt>real</tt></li><li><a href="positive63.html"><tt>positive?</tt></a> : <tt>(number -&gt; bool)</tt></li><li><a href="quotient.html"><tt>quotient</tt></a> : <tt>(int int -&gt; int)</tt></li><li><a href="random.html"><tt>random</tt></a> : <tt>(int -&gt; int)</tt></li><li><a href="rational63.html"><tt>rational?</tt></a> : <tt>(any -&gt; bool)</tt></li><li><a href="real-part.html"><tt>real-part</tt></a> : <tt>(num -&gt; real)</tt></li><li><a href="real63.html"><tt>real?</tt></a> : <tt>(any -&gt; bool)</tt></li><li><a href="remainder.html"><tt>remainder</tt></a> : <tt>(int int -&gt; int)</tt></li><li><a href="round.html"><tt>round</tt></a> : <tt>(real -&gt; int)</tt></li><li><a href="sgn.html"><tt>sgn</tt></a> : <tt>(real -&gt; (union 1 #i1.0 0 #i0.0 -1 #i-1.0))</tt></li><li><a href="sin.html"><tt>sin</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="sinh.html"><tt>sinh</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="sqr.html"><tt>sqr</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="sqrt.html"><tt>sqrt</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="sub1.html"><tt>sub1</tt></a> : <tt>(number -&gt; number)</tt></li><li><a href="tan.html"><tt>tan</tt></a> : <tt>(num -&gt; num)</tt></li><li><a href="zero63.html"><tt>zero?</tt></a> : <tt>(number -&gt; bool)</tt></li></ul></li><li><i>Booleans</i><ul><li><a href="boolean6163.html"><tt>boolean=?</tt></a> : <tt>(boolean boolean -&gt; boolean)</tt></li><li><a href="boolean63.html"><tt>boolean?</tt></a> : <tt>(any -&gt; boolean)</tt></li><li><a href="not.html"><tt>not</tt></a> : <tt>(boolean -&gt; boolean)</tt></li></ul></li><li><i>Symbols</i><ul><li><a href="symbol-62string.html"><tt>symbol-&gt;string</tt></a> : <tt>(symbol -&gt; string)</tt></li><li><a href="symbol6163.html"><tt>symbol=?</tt></a> : <tt>(symbol symbol -&gt; boolean)</tt></li><li><a href="symbol63.html"><tt>symbol?</tt></a> : <tt>(any -&gt; boolean)</tt></li></ul></li><li><i>Lists</i><ul><li><a href="append.html"><tt>append</tt></a> : <tt>((listof any) ... -&gt; (listof any))</tt></li><li><a href="assq.html"><tt>assq</tt></a> : <tt>(x (listof (cons x y)) -&gt; (union false (cons x y)))</tt></li><li><a href="caaar.html"><tt>caaar</tt></a> : <tt>((cons (cons (cons w (listof z)) (listof y)) (listof x)) -&gt; w)</tt></li><li><a href="caadr.html"><tt>caadr</tt></a> : <tt>((cons (cons (cons w (listof z)) (listof y)) (listof x)) -&gt; (listof z))</tt></li><li><a href="caar.html"><tt>caar</tt></a> : <tt>((cons (cons z (listof y)) (listof x)) -&gt; z)</tt></li><li><a href="cadar.html"><tt>cadar</tt></a> : <tt>((cons (cons w (cons z (listof y))) (listof x)) -&gt; z)</tt></li><li><a href="cadddr.html"><tt>cadddr</tt></a> : <tt>((listof y) -&gt; y)</tt></li><li><a href="caddr.html"><tt>caddr</tt></a> : <tt>((cons w (cons z (cons y (listof x)))) -&gt; y)</tt></li><li><a href="cadr.html"><tt>cadr</tt></a> : <tt>((cons z (cons y (listof x))) -&gt; y)</tt></li><li><a href="car.html"><tt>car</tt></a> : <tt>((cons y (listof x)) -&gt; y)</tt></li><li><a href="cdaar.html"><tt>cdaar</tt></a> : <tt>((cons (cons (cons w (listof z)) (listof y)) (listof x)) -&gt; (listof z))</tt></li><li><a href="cdadr.html"><tt>cdadr</tt></a> : <tt>((cons w (cons (cons z (listof y)) (listof x))) -&gt; (listof y))</tt></li><li><a href="cdar.html"><tt>cdar</tt></a> : <tt>((cons (cons z (listof y)) (listof x)) -&gt; (listof y))</tt></li><li><a href="cddar.html"><tt>cddar</tt></a> : <tt>((cons (cons w (cons z (listof y))) (listof x)) -&gt; (listof y))</tt></li><li><a href="cdddr.html"><tt>cdddr</tt></a> : <tt>((cons w (cons z (cons y (listof x)))) -&gt; (listof x))</tt></li><li><a href="cddr.html"><tt>cddr</tt></a> : <tt>((cons z (cons y (listof x))) -&gt; (listof x))</tt></li><li><a href="cdr.html"><tt>cdr</tt></a> : <tt>((cons y (listof x)) -&gt; (listof x))</tt></li><li><a href="cons.html"><tt>cons</tt></a> : <tt>(x (listof x) -&gt; (listof x))</tt></li><li><a href="cons63.html"><tt>cons?</tt></a> : <tt>(any -&gt; boolean)</tt></li><li><a href="eighth.html"><tt>eighth</tt></a> : <tt>((listof y) -&gt; y)</tt></li><li><a href="empty63.html"><tt>empty?</tt></a> : <tt>(any -&gt; boolean)</tt></li><li><a href="fifth.html"><tt>fifth</tt></a> : <tt>((listof y) -&gt; y)</tt></li><li><a href="first.html"><tt>first</tt></a> : <tt>((cons y (listof x)) -&gt; y)</tt></li><li><a href="fourth.html"><tt>fourth</tt></a> : <tt>((listof y) -&gt; y)</tt></li><li><a href="length.html"><tt>length</tt></a> : <tt>(list -&gt; number)</tt></li><li><a href="list.html"><tt>list</tt></a> : <tt>(any ... (listof any) -&gt; (listof any))</tt></li><li><a href="list.html"><tt>list</tt></a> : <tt>(any ... -&gt; (listof any))</tt></li><li><a href="list42.html"><tt>list*</tt></a> : <tt>(any ... (listof any) -&gt; (listof any))</tt></li><li><a href="list-ref.html"><tt>list-ref</tt></a> : <tt>((listof x) natural-number -&gt; x)</tt></li><li><a href="list63.html"><tt>list?</tt></a> : <tt>(any -&gt; boolean)</tt></li><li><a href="member.html"><tt>member</tt></a> : <tt>(any list -&gt; (union false list))</tt></li><li><a href="memq.html"><tt>memq</tt></a> : <tt>(any list -&gt; (union false list))</tt></li><li><a href="memv.html"><tt>memv</tt></a> : <tt>(any list -&gt; (union false list))</tt></li><li><a href="null.html"><tt>null</tt></a> : <tt>empty</tt></li><li><a href="null63.html"><tt>null?</tt></a> : <tt>(any -&gt; boolean)</tt></li><li><a href="pair63.html"><tt>pair?</tt></a> : <tt>(any -&gt; boolean)</tt></li><li><a href="rest.html"><tt>rest</tt></a> : <tt>((cons y (listof x)) -&gt; (listof x))</tt></li><li><a href="reverse.html"><tt>reverse</tt></a> : <tt>(list -&gt; list)</tt></li><li><a href="second.html"><tt>second</tt></a> : <tt>((cons z (cons y (listof x))) -&gt; y)</tt></li><li><a href="seventh.html"><tt>seventh</tt></a> : <tt>((listof y) -&gt; y)</tt></li><li><a href="sixth.html"><tt>sixth</tt></a> : <tt>((listof y) -&gt; y)</tt></li><li><a href="third.html"><tt>third</tt></a> : <tt>((cons w (cons z (cons y (listof x)))) -&gt; y)</tt></li></ul></li><li><i>Images</i><ul><li><a href="image6163.html"><tt>image=?</tt></a> : <tt>(image image -&gt; boolean)</tt></li><li><a href="image63.html"><tt>image?</tt></a> : <tt>(any -&gt; boolean)</tt></li></ul></li><li><i>Posns</i><ul><li><a href="make-posn.html"><tt>make-posn</tt></a> : <tt>(number number -&gt; posn)</tt></li><li><a href="posn-x.html"><tt>posn-x</tt></a> : <tt>(posn -&gt; number)</tt></li><li><a href="posn-y.html"><tt>posn-y</tt></a> : <tt>(posn -&gt; number)</tt></li><li><a href="posn63.html"><tt>posn?</tt></a> : <tt>(anything -&gt; boolean)</tt></li></ul></li><li><i>Characters</i><ul><li><a href="char-62integer.html"><tt>char-&gt;integer</tt></a> : <tt>(char -&gt; integer)</tt></li><li><a href="char-alphabetic63.html"><tt>char-alphabetic?</tt></a> : <tt>(char -&gt; boolean)</tt></li><li><a href="char-ci606163.html"><tt>char-ci&lt;=?</tt></a> : <tt>(char char ... -&gt; boolean)</tt></li><li><a href="char-ci6063.html"><tt>char-ci&lt;?</tt></a> : <tt>(char char ... -&gt; boolean)</tt></li><li><a href="char-ci6163.html"><tt>char-ci=?</tt></a> : <tt>(char char ... -&gt; boolean)</tt></li><li><a href="char-ci626163.html"><tt>char-ci&gt;=?</tt></a> : <tt>(char char ... -&gt; boolean)</tt></li><li><a href="char-ci6263.html"><tt>char-ci&gt;?</tt></a> : <tt>(char char ... -&gt; boolean)</tt></li><li><a href="char-downcase.html"><tt>char-downcase</tt></a> : <tt>(char -&gt; char)</tt></li><li><a href="char-lower-case63.html"><tt>char-lower-case?</tt></a> : <tt>(char -&gt; boolean)</tt></li><li><a href="char-numeric63.html"><tt>char-numeric?</tt></a> : <tt>(char -&gt; boolean)</tt></li><li><a href="char-upcase.html"><tt>char-upcase</tt></a> : <tt>(char -&gt; char)</tt></li><li><a href="char-upper-case63.html"><tt>char-upper-case?</tt></a> : <tt>(char -&gt; boolean)</tt></li><li><a href="char-whitespace63.html"><tt>char-whitespace?</tt></a> : <tt>(char -&gt; boolean)</tt></li><li><a href="char606163.html"><tt>char&lt;=?</tt></a> : <tt>(char char ... -&gt; boolean)</tt></li><li><a href="char6063.html"><tt>char&lt;?</tt></a> : <tt>(char char ... -&gt; boolean)</tt></li><li><a href="char6163.html"><tt>char=?</tt></a> : <tt>(char char ... -&gt; boolean)</tt></li><li><a href="char626163.html"><tt>char&gt;=?</tt></a> : <tt>(char char ... -&gt; boolean)</tt></li><li><a href="char6263.html"><tt>char&gt;?</tt></a> : <tt>(char char ... -&gt; boolean)</tt></li><li><a href="char63.html"><tt>char?</tt></a> : <tt>(any -&gt; boolean)</tt></li></ul></li><li><i>Strings</i><ul><li><a href="format.html"><tt>format</tt></a> : <tt>(string any ... -&gt; string)</tt></li><li><a href="list-62string.html"><tt>list-&gt;string</tt></a> : <tt>((listof char) -&gt; string)</tt></li><li><a href="make-string.html"><tt>make-string</tt></a> : <tt>(nat char -&gt; string)</tt></li><li><a href="string-62list.html"><tt>string-&gt;list</tt></a> : <tt>(string -&gt; (listof char))</tt></li><li><a href="string-62number.html"><tt>string-&gt;number</tt></a> : <tt>(string -&gt; (union number false))</tt></li><li><a href="string-62symbol.html"><tt>string-&gt;symbol</tt></a> : <tt>(string -&gt; symbol)</tt></li><li><a href="string-append.html"><tt>string-append</tt></a> : <tt>(string ... -&gt; string)</tt></li><li><a href="string-ci606163.html"><tt>string-ci&lt;=?</tt></a> : <tt>(string string ... -&gt; boolean)</tt></li><li><a href="string-ci6063.html"><tt>string-ci&lt;?</tt></a> : <tt>(string string ... -&gt; boolean)</tt></li><li><a href="string-ci6163.html"><tt>string-ci=?</tt></a> : <tt>(string string ... -&gt; boolean)</tt></li><li><a href="string-ci626163.html"><tt>string-ci&gt;=?</tt></a> : <tt>(string string ... -&gt; boolean)</tt></li><li><a href="string-ci6263.html"><tt>string-ci&gt;?</tt></a> : <tt>(string string ... -&gt; boolean)</tt></li><li><a href="string-copy.html"><tt>string-copy</tt></a> : <tt>(string -&gt; string)</tt></li><li><a href="string-length.html"><tt>string-length</tt></a> : <tt>(string -&gt; nat)</tt></li><li><a href="string-ref.html"><tt>string-ref</tt></a> : <tt>(string nat -&gt; char)</tt></li><li><a href="string606163.html"><tt>string&lt;=?</tt></a> : <tt>(string string ... -&gt; boolean)</tt></li><li><a href="string6063.html"><tt>string&lt;?</tt></a> : <tt>(string string ... -&gt; boolean)</tt></li><li><a href="string6163.html"><tt>string=?</tt></a> : <tt>(string string ... -&gt; boolean)</tt></li><li><a href="string626163.html"><tt>string&gt;=?</tt></a> : <tt>(string string ... -&gt; boolean)</tt></li><li><a href="string6263.html"><tt>string&gt;?</tt></a> : <tt>(string string ... -&gt; boolean)</tt></li><li><a href="string63.html"><tt>string?</tt></a> : <tt>(any -&gt; boolean)</tt></li><li><a href="substring.html"><tt>substring</tt></a> : <tt>(string nat nat -&gt; string)</tt></li></ul></li><li><i>Misc</i><ul><li><a href="61126.html"><tt>=~</tt></a> : <tt>(real real non-negative-real -&gt; boolean)</tt></li><li><a href="eof.html"><tt>eof</tt></a> : <tt>eof</tt></li><li><a href="eof-object63.html"><tt>eof-object?</tt></a> : <tt>(any -&gt; boolean)</tt></li><li><a href="eq63.html"><tt>eq?</tt></a> : <tt>(any any -&gt; boolean)</tt></li><li><a href="equal63.html"><tt>equal?</tt></a> : <tt>(any any -&gt; boolean)</tt></li><li><a href="equal12663.html"><tt>equal~?</tt></a> : <tt>(any any non-negative-real -&gt; boolean)</tt></li><li><a href="eqv63.html"><tt>eqv?</tt></a> : <tt>(any any -&gt; boolean)</tt></li><li><a href="error.html"><tt>error</tt></a> : <tt>(symbol string -&gt; void)</tt></li><li><a href="exit.html"><tt>exit</tt></a> : <tt>(-&gt; void)</tt></li><li><a href="identity.html"><tt>identity</tt></a> : <tt>(any -&gt; any)</tt></li><li><a href="struct63.html"><tt>struct?</tt></a> : <tt>(any -&gt; boolean)</tt></li></ul></li></ul></li></ul></p><p>This language is a superset of <a href="../beginning/index.htm">Beginning Student</a>.</p></body></html>