(
("struct?" "struct?" "struct63.html" #f "struct?")
("identity" "identity" "identity.html" #f "identity")
("exit" "exit" "exit.html" #f "exit")
("error" "error" "error.html" #f "error")
("eqv?" "eqv?" "eqv63.html" #f "eqv?")
("equal~?" "equal~?" "equal12663.html" #f "equal~?")
("equal?" "equal?" "equal63.html" #f "equal?")
("eq?" "eq?" "eq63.html" #f "eq?")
("eof-object?" "eof-object?" "eof-object63.html" #f "eof-object?")
("eof" "eof" "eof.html" #f "eof")
("=~" "=~" "61126.html" #f "=~")
("substring" "substring" "substring.html" #f "substring")
("string?" "string?" "string63.html" #f "string?")
("string>?" "string>?" "string6263.html" #f "string>?")
("string>=?" "string>=?" "string626163.html" #f "string>=?")
("string=?" "string=?" "string6163.html" #f "string=?")
("string<?" "string<?" "string6063.html" #f "string<?")
("string<=?" "string<=?" "string606163.html" #f "string<=?")
("string-ref" "string-ref" "string-ref.html" #f "string-ref")
("string-length" "string-length" "string-length.html" #f "string-length")
("string-copy" "string-copy" "string-copy.html" #f "string-copy")
("string-ci>?" "string-ci>?" "string-ci6263.html" #f "string-ci>?")
("string-ci>=?" "string-ci>=?" "string-ci626163.html" #f "string-ci>=?")
("string-ci=?" "string-ci=?" "string-ci6163.html" #f "string-ci=?")
("string-ci<?" "string-ci<?" "string-ci6063.html" #f "string-ci<?")
("string-ci<=?" "string-ci<=?" "string-ci606163.html" #f "string-ci<=?")
("string-append" "string-append" "string-append.html" #f "string-append")
("string->symbol" "string->symbol" "string-62symbol.html" #f "string->symbol")
("string->number" "string->number" "string-62number.html" #f "string->number")
("string->list" "string->list" "string-62list.html" #f "string->list")
("make-string" "make-string" "make-string.html" #f "make-string")
("list->string" "list->string" "list-62string.html" #f "list->string")
("format" "format" "format.html" #f "format")
("char?" "char?" "char63.html" #f "char?")
("char>?" "char>?" "char6263.html" #f "char>?")
("char>=?" "char>=?" "char626163.html" #f "char>=?")
("char=?" "char=?" "char6163.html" #f "char=?")
("char<?" "char<?" "char6063.html" #f "char<?")
("char<=?" "char<=?" "char606163.html" #f "char<=?")
("char-whitespace?" "char-whitespace?" "char-whitespace63.html" #f "char-whitespace?")
("char-upper-case?" "char-upper-case?" "char-upper-case63.html" #f "char-upper-case?")
("char-upcase" "char-upcase" "char-upcase.html" #f "char-upcase")
("char-numeric?" "char-numeric?" "char-numeric63.html" #f "char-numeric?")
("char-lower-case?" "char-lower-case?" "char-lower-case63.html" #f "char-lower-case?")
("char-downcase" "char-downcase" "char-downcase.html" #f "char-downcase")
("char-ci>?" "char-ci>?" "char-ci6263.html" #f "char-ci>?")
("char-ci>=?" "char-ci>=?" "char-ci626163.html" #f "char-ci>=?")
("char-ci=?" "char-ci=?" "char-ci6163.html" #f "char-ci=?")
("char-ci<?" "char-ci<?" "char-ci6063.html" #f "char-ci<?")
("char-ci<=?" "char-ci<=?" "char-ci606163.html" #f "char-ci<=?")
("char-alphabetic?" "char-alphabetic?" "char-alphabetic63.html" #f "char-alphabetic?")
("char->integer" "char->integer" "char-62integer.html" #f "char->integer")
("posn?" "posn?" "posn63.html" #f "posn?")
("posn-y" "posn-y" "posn-y.html" #f "posn-y")
("posn-x" "posn-x" "posn-x.html" #f "posn-x")
("make-posn" "make-posn" "make-posn.html" #f "make-posn")
("image?" "image?" "image63.html" #f "image?")
("image=?" "image=?" "image6163.html" #f "image=?")
("third" "third" "third.html" #f "third")
("sixth" "sixth" "sixth.html" #f "sixth")
("seventh" "seventh" "seventh.html" #f "seventh")
("second" "second" "second.html" #f "second")
("reverse" "reverse" "reverse.html" #f "reverse")
("rest" "rest" "rest.html" #f "rest")
("pair?" "pair?" "pair63.html" #f "pair?")
("null?" "null?" "null63.html" #f "null?")
("null" "null" "null.html" #f "null")
("memv" "memv" "memv.html" #f "memv")
("memq" "memq" "memq.html" #f "memq")
("member" "member" "member.html" #f "member")
("list?" "list?" "list63.html" #f "list?")
("list-ref" "list-ref" "list-ref.html" #f "list-ref")
("list*" "list*" "list42.html" #f "list*")
("list" "list" "list.html" #f "list")
("list" "list" "list.html" #f "list")
("length" "length" "length.html" #f "length")
("fourth" "fourth" "fourth.html" #f "fourth")
("first" "first" "first.html" #f "first")
("fifth" "fifth" "fifth.html" #f "fifth")
("empty?" "empty?" "empty63.html" #f "empty?")
("eighth" "eighth" "eighth.html" #f "eighth")
("cons?" "cons?" "cons63.html" #f "cons?")
("cons" "cons" "cons.html" #f "cons")
("cdr" "cdr" "cdr.html" #f "cdr")
("cddr" "cddr" "cddr.html" #f "cddr")
("cdddr" "cdddr" "cdddr.html" #f "cdddr")
("cddar" "cddar" "cddar.html" #f "cddar")
("cdar" "cdar" "cdar.html" #f "cdar")
("cdadr" "cdadr" "cdadr.html" #f "cdadr")
("cdaar" "cdaar" "cdaar.html" #f "cdaar")
("car" "car" "car.html" #f "car")
("cadr" "cadr" "cadr.html" #f "cadr")
("caddr" "caddr" "caddr.html" #f "caddr")
("cadddr" "cadddr" "cadddr.html" #f "cadddr")
("cadar" "cadar" "cadar.html" #f "cadar")
("caar" "caar" "caar.html" #f "caar")
("caadr" "caadr" "caadr.html" #f "caadr")
("caaar" "caaar" "caaar.html" #f "caaar")
("assq" "assq" "assq.html" #f "assq")
("append" "append" "append.html" #f "append")
("symbol?" "symbol?" "symbol63.html" #f "symbol?")
("symbol=?" "symbol=?" "symbol6163.html" #f "symbol=?")
("symbol->string" "symbol->string" "symbol-62string.html" #f "symbol->string")
("not" "not" "not.html" #f "not")
("boolean?" "boolean?" "boolean63.html" #f "boolean?")
("boolean=?" "boolean=?" "boolean6163.html" #f "boolean=?")
("zero?" "zero?" "zero63.html" #f "zero?")
("tan" "tan" "tan.html" #f "tan")
("sub1" "sub1" "sub1.html" #f "sub1")
("sqrt" "sqrt" "sqrt.html" #f "sqrt")
("sqr" "sqr" "sqr.html" #f "sqr")
("sinh" "sinh" "sinh.html" #f "sinh")
("sin" "sin" "sin.html" #f "sin")
("sgn" "sgn" "sgn.html" #f "sgn")
("round" "round" "round.html" #f "round")
("remainder" "remainder" "remainder.html" #f "remainder")
("real?" "real?" "real63.html" #f "real?")
("real-part" "real-part" "real-part.html" #f "real-part")
("rational?" "rational?" "rational63.html" #f "rational?")
("random" "random" "random.html" #f "random")
("quotient" "quotient" "quotient.html" #f "quotient")
("positive?" "positive?" "positive63.html" #f "positive?")
("pi" "pi" "pi.html" #f "pi")
("odd?" "odd?" "odd63.html" #f "odd?")
("numerator" "numerator" "numerator.html" #f "numerator")
("number?" "number?" "number63.html" #f "number?")
("number->string" "number->string" "number-62string.html" #f "number->string")
("negative?" "negative?" "negative63.html" #f "negative?")
("modulo" "modulo" "modulo.html" #f "modulo")
("min" "min" "min.html" #f "min")
("max" "max" "max.html" #f "max")
("make-polar" "make-polar" "make-polar.html" #f "make-polar")
("magnitude" "magnitude" "magnitude.html" #f "magnitude")
("log" "log" "log.html" #f "log")
("lcm" "lcm" "lcm.html" #f "lcm")
("integer?" "integer?" "integer63.html" #f "integer?")
("integer->char" "integer->char" "integer-62char.html" #f "integer->char")
("inexact?" "inexact?" "inexact63.html" #f "inexact?")
("inexact->exact" "inexact->exact" "inexact-62exact.html" #f "inexact->exact")
("imag-part" "imag-part" "imag-part.html" #f "imag-part")
("gcd" "gcd" "gcd.html" #f "gcd")
("floor" "floor" "floor.html" #f "floor")
("expt" "expt" "expt.html" #f "expt")
("exp" "exp" "exp.html" #f "exp")
("exact?" "exact?" "exact63.html" #f "exact?")
("exact->inexact" "exact->inexact" "exact-62inexact.html" #f "exact->inexact")
("even?" "even?" "even63.html" #f "even?")
("e" "e" "e.html" #f "e")
("denominator" "denominator" "denominator.html" #f "denominator")
("current-seconds" "current-seconds" "current-seconds.html" #f "current-seconds")
("cosh" "cosh" "cosh.html" #f "cosh")
("cos" "cos" "cos.html" #f "cos")
("conjugate" "conjugate" "conjugate.html" #f "conjugate")
("complex?" "complex?" "complex63.html" #f "complex?")
("ceiling" "ceiling" "ceiling.html" #f "ceiling")
("atan" "atan" "atan.html" #f "atan")
("asin" "asin" "asin.html" #f "asin")
("angle" "angle" "angle.html" #f "angle")
("add1" "add1" "add1.html" #f "add1")
("acos" "acos" "acos.html" #f "acos")
("abs" "abs" "abs.html" #f "abs")
(">=" ">=" "6261.html" #f ">=")
(">" ">" "62.html" #f ">")
("=" "=" "61.html" #f "=")
("<=" "<=" "6061.html" #f "<=")
("<" "<" "60.html" #f "<")
("/" "/" "47.html" #f "/")
("-" "-" "-.html" #f "-")
("+" "+" "43.html" #f "+")
("*" "*" "42.html" #f "*")
("unquote-splicing" ",@EXPRESSION" "unquote-splicing.html" #f "unquote-splicing")
("unquote" ",EXPRESSION" "unquote.html" #f "unquote")
("quasiquoted-quasiquote" "`QUASIQUOTED" "quasiquoted-quasiquote.html" #f "quasiquoted-quasiquote")
("quasiquoted-quote" "'QUASIQUOTED" "quasiquoted-quote.html" #f "quasiquoted-quote")
("quasiquoted-list" "(QUASIQUOTED ...)" "quasiquoted-list.html" #f "quasiquoted-list")
("quasiquoted-character" "CHARACTER" "quasiquoted-character.html" #f "quasiquoted-character")
("quasiquoted-string" "STRING" "quasiquoted-string.html" #f "quasiquoted-string")
("quasiquoted-number" "NUMBER" "quasiquoted-number.html" #f "quasiquoted-number")
("symbol" "NAME" "symbol.html" #f "symbol")
("quoted-unquote-splicing" ",@QUOTED" "quoted-unquote-splicing.html" #f "quoted-unquote-splicing")
("quoted-unquote" ",QUOTED" "quoted-unquote.html" #f "quoted-unquote")
("quoted-quasiquote" "`QUOTED" "quoted-quasiquote.html" #f "quoted-quasiquote")
("quoted-quote" "'QUOTED" "quoted-quote.html" #f "quoted-quote")
("quoted-list" "(QUOTED ...)" "quoted-list.html" #f "quoted-list")
("quoted-character" "CHARACTER" "quoted-character.html" #f "quoted-character")
("quoted-string" "STRING" "quoted-string.html" #f "quoted-string")
("quoted-number" "NUMBER" "quoted-number.html" #f "quoted-number")
("symbol" "NAME" "symbol.html" #f "symbol")
("character" "CHARACTER" "character.html" #f "character")
("string" "STRING" "string.html" #f "string")
("boolean" "false" "boolean.html" #f "boolean")
("boolean" "true" "boolean.html" #f "boolean")
("number" "NUMBER" "number.html" #f "number")
("quasiquote" "`QUASIQUOTED" "quasiquote.html" #f "quasiquote")
("quote" "'QUOTED" "quote.html" #f "quote")
("variable" "NAME" "variable.html" #f "variable")
("empty" "empty" "empty.html" #f "empty")
("or" "(or EXPRESSION   EXPRESSION EXPRESSION ...)" "or.html" #f "or")
("and" "(and EXPRESSION   EXPRESSION EXPRESSION ...)" "and.html" #f "and")
("if" "(if EXPRESSION EXPRESSION EXPRESSION)" "if.html" #f "if")
("cond" "(cond (EXPRESSION EXPRESSION) ...   (else EXPRESSION))" "cond.html" #f "cond")
("cond" "(cond (EXPRESSION EXPRESSION) (EXPRESSION EXPRESSION) ...)" "cond.html" #f "cond")
("primitives" "(PRIM-OP EXPRESSION ...)" "primitives.html" #f "primitives")
("application" "(NAME EXPRESSION EXPRESSION ...)" "application.html" #f "application")
("define-struct" "(define-struct NAME (NAME ...)) " "define-struct.html" #f "define-struct")
("define" "(define NAME (lambda (NAME NAME ...) EXPRESSION)) " "define.html" #f "define")
("define" "(define NAME EXPRESSION)" "define.html" #f "define")
("define" "(define (NAME NAME NAME ...) EXPRESSION)" "define.html" #f "define")
)
