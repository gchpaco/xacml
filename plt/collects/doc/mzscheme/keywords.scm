("when" "when syntax" "definitionwhen")
("unless" "unless syntax" "definitionunless")
("begin0" "begin0 syntax" "definitionbegin0")
("define" "define keyword" "definitiondefine")
("define-values" "define-values syntax" "definitiondefine-values")
("let-values" "let-values syntax" "definitionlet-values")
("let*-values" "let*-values syntax" "definitionlet*-values")
("letrec-values" "letrec-values syntax" "definitionletrec-values")
("set!-values" "set!-values syntax" "definitionset!-values")
("fluid-let" "fluid-let syntax" "definitionfluid-let")
("case-lambda" "case-lambda syntax" "definitioncase-lambda")
("void" "(void v ...)" "definitionvoid")
("void?" "(void? v)" "definitionvoid?")
("andmap" "(andmap proc list ...1)" "definitionandmap")
("ormap" "(ormap proc list ...1)" "definitionormap")
("add1" "(add1 z)" "definitionadd1")
("sub1" "(sub1 z)" "definitionsub1")
("quotient/remainder" "(quotient/remainder n1 n2)" "definitionquotient/remainder")
("integer-sqrt" "(integer-sqrt n)" "definitioninteger-sqrt")
("integer-sqrt/remainder" "(integer-sqrt/remainder n)" "definitioninteger-sqrt/remainder")
("bitwise-ior" "(bitwise-ior n ...1)" "definitionbitwise-ior")
("bitwise-and" "(bitwise-and n ...1)" "definitionbitwise-and")
("bitwise-xor" "(bitwise-xor n ...1)" "definitionbitwise-xor")
("bitwise-not" "(bitwise-not n)" "definitionbitwise-not")
("arithmetic-shift" "(arithmetic-shift n m)" "definitionarithmetic-shift")
("random" "(random k)" "definitionrandom")
("random-seed" "(random-seed k)" "definitionrandom-seed")
("current-pseudo-random-generator" "(current-pseudo-random-generator)" "definitioncurrent-pseudo-random-generator")
("current-pseudo-random-generator" "(current-pseudo-random-generator generator)" "definitioncurrent-pseudo-random-generator")
("make-pseudo-random-generator" "(make-pseudo-random-generator)" "definitionmake-pseudo-random-generator")
("pseudo-random-generator?" "(pseudo-random-generator? v)" "definitionpseudo-random-generator?")
("integer-byte-string->integer" "(integer-byte-string->integer string signed? [big-endian?])" "definitioninteger-byte-string->integer")
("integer->integer-byte-string" "(integer->integer-byte-string n size-n signed? [big-endian? to-string])" "definitioninteger->integer-byte-string")
("floating-point-byte-string->real" "(floating-point-byte-string->real string [big-endian?])" "definitionfloating-point-byte-string->real")
("real->floating-point-byte-string" "(real->floating-point-byte-string x size-n [big-endian? to-string])" "definitionreal->floating-point-byte-string")
("system-big-endian?" "(system-big-endian?)" "definitionsystem-big-endian?")
("char->latin-1-integer" "(char->latin-1-integer char)" "definitionchar->latin-1-integer")
("latin-1-integer->char" "(latin-1-integer->char k)" "definitionlatin-1-integer->char")
("char-locale<?" "(char-locale<? char1 char2 ...1)" "definitionchar-locale<?")
("char-locale>?" "(char-locale>? char1 char2 ...1)" "definitionchar-locale>?")
("char-locale-ci=?" "(char-locale-ci=? char1 char2 ...1)" "definitionchar-locale-ci=?")
("char-locale-ci<?" "(char-locale-ci<? char1 char2 ...1)" "definitionchar-locale-ci<?")
("char-locale-ci>?" "(char-locale-ci>? char1 char2 ...1)" "definitionchar-locale-ci>?")
("char-locale-whitespace?" "(char-locale-whitespace? char)" "definitionchar-locale-whitespace?")
("char-locale-alphabetic?" "(char-locale-alphabetic? char)" "definitionchar-locale-alphabetic?")
("char-locale-numeric?" "(char-locale-numeric? char)" "definitionchar-locale-numeric?")
("char-locale-upper-case?" "(char-locale-upper-case? char)" "definitionchar-locale-upper-case?")
("char-locale-lower-case?" "(char-locale-lower-case? char)" "definitionchar-locale-lower-case?")
("char-locale-upcase" "(char-locale-upcase char)" "definitionchar-locale-upcase")
("char-locale-downcase" "(char-locale-downcase char)" "definitionchar-locale-downcase")
("string->immutable-string" "(string->immutable-string string)" "definitionstring->immutable-string")
("substring" "(substring string start-k [end-k])" "definitionsubstring")
("string-copy!" "(string-copy! dest-string dest-start-k src-string [src-start-k src-end-k])" "definitionstring-copy!")
("string-locale<?" "(string-locale<? string1 string2 ...1)" "definitionstring-locale<?")
("string-locale>?" "(string-locale>? string1 string2 ...1)" "definitionstring-locale>?")
("string-locale-ci=?" "(string-locale-ci=? string1 string2 ...1)" "definitionstring-locale-ci=?")
("string-locale-ci<?" "(string-locale-ci<? string1 string2 ...1)" "definitionstring-locale-ci<?")
("string-locale-ci>?" "(string-locale-ci>? string1 string2 ...1)" "definitionstring-locale-ci>?")
("string->uninterned-symbol" "(string->uninterned-symbol string)" "definitionstring->uninterned-symbol")
("gensym" "(gensym [symbol/string])" "definitiongensym")
("vector->immutable-vector" "(vector->immutable-vector vec)" "definitionvector->immutable-vector")
("vector-immutable" "(vector-immutable v ...1)" "definitionvector-immutable")
("null" "null" "definitionnull")
("reverse!" "(reverse! list)" "definitionreverse!")
("append!" "(append! list ...1)" "definitionappend!")
("list*" "(list* v ...1)" "definitionlist*")
("cons-immutable" "(cons-immutable v1 v2)" "definitioncons-immutable")
("list-immutable" "(list-immutable v ...1)" "definitionlist-immutable")
("list*-immutable" "(list*-immutable v ...1)" "definitionlist*-immutable")
("immutable?" "(immutable? v)" "definitionimmutable?")
("box" "(box v)" "definitionbox")
("box-immutable" "(box-immutable v)" "definitionbox-immutable")
("unbox" "(unbox box)" "definitionunbox")
("set-box!" "(set-box! mutable-box v)" "definitionset-box!")
("box?" "(box? v)" "definitionbox?")
("procedure-arity" "(procedure-arity proc)" "definitionprocedure-arity")
("arity-at-least-value" "arity-at-least-value" "definitionarity-at-least-value")
("arity-at-least?" "arity-at-least?" "definitionarity-at-least?")
("procedure-arity-includes?" "(procedure-arity-includes? proc k)" "definitionprocedure-arity-includes?")
("primitive?" "(primitive? v)" "definitionprimitive?")
("primitive-result-arity" "(primitive-result-arity prim-proc)" "definitionprimitive-result-arity")
("primitive-closure?" "(primitive-closure? v)" "definitionprimitive-closure?")
("promise?" "(promise? v)" "definitionpromise?")
("make-hash-table" "(make-hash-table [flag-symbol flag-symbol])" "definitionmake-hash-table")
("make-immutable-hash-table" "(make-immutable-hash-table assoc-list [flag-symbol])" "definitionmake-immutable-hash-table")
("hash-table?" "(hash-table? v [flag-symbol flag-symbol])" "definitionhash-table?")
("hash-table-put!" "(hash-table-put! hash-table key-v v)" "definitionhash-table-put!")
("hash-table-get" "(hash-table-get hash-table key-v [failure-thunk])" "definitionhash-table-get")
("hash-table-remove!" "(hash-table-remove! hash-table key-v)" "definitionhash-table-remove!")
("hash-table-map" "(hash-table-map hash-table proc)" "definitionhash-table-map")
("hash-table-for-each" "(hash-table-for-each hash-table proc)" "definitionhash-table-for-each")
("hash-table-count" "(hash-table-count hash-table)" "definitionhash-table-count")
("eq-hash-code" "(eq-hash-code v)" "definitioneq-hash-code")
("equal-hash-code" "(equal-hash-code v)" "definitionequal-hash-code")
("define-struct" "define-struct syntax" "definitiondefine-struct")
("let-struct" "let-struct syntax" "definitionlet-struct")
("make-struct-type" "(make-struct-type name-symbol super-struct-type\n init-field-k auto-field-k [auto-v prop-value-list inspector proc-spec\n immutable-k-list])" "definitionmake-struct-type")
("make-struct-field-accessor" "(make-struct-field-accessor accessor-proc field-pos-k field-name-symbol)" "definitionmake-struct-field-accessor")
("make-struct-field-mutator" "(make-struct-field-mutator mutator-proc field-pos-k field-name-symbol)" "definitionmake-struct-field-mutator")
("make-struct-type-property" "(make-struct-type-property name-symbol [guard-proc])" "definitionmake-struct-type-property")
("struct-type-property?" "(struct-type-property? v)" "definitionstruct-type-property?")
("make-inspector" "(make-inspector [inspector])" "definitionmake-inspector")
("inspector?" "(inspector? v)" "definitioninspector?")
("struct-info" "(struct-info v)" "definitionstruct-info")
("struct-type-info" "(struct-type-info struct-type)" "definitionstruct-type-info")
("prop:waitable" "prop:waitable" "definitionprop:waitable")
("struct->vector" "(struct->vector v [opaque-v])" "definitionstruct->vector")
("struct?" "(struct? v)" "definitionstruct?")
("struct-type?" "(struct-type? v)" "definitionstruct-type?")
("struct-constructor-procedure?" "(struct-constructor-procedure? v)" "definitionstruct-constructor-procedure?")
("struct-predicate-procedure?" "(struct-predicate-procedure? v)" "definitionstruct-predicate-procedure?")
("struct-accessor-procedure?" "(struct-accessor-procedure? v)" "definitionstruct-accessor-procedure?")
("struct-mutator-procedure?" "(struct-mutator-procedure? v)" "definitionstruct-mutator-procedure?")
("module" "module syntax" "definitionmodule")
("require" "require syntax" "definitionrequire")
("provide" "provide syntax" "definitionprovide")
("file" "file keyword" "definitionfile")
("lib" "lib keyword" "definitionlib")
("planet" "planet keyword" "definitionplanet")
("dynamic-require" "(dynamic-require module-path-v provided-symbol)" "definitiondynamic-require")
("dynamic-require-for-syntax" "(dynamic-require-for-syntax module-path-v provided-symbol-or-\\#f)" "definitiondynamic-require-for-syntax")
("raise" "(raise exn)" "definitionraise")
("current-exception-handler" "(current-exception-handler)" "definitioncurrent-exception-handler")
("with-handlers" "with-handlers syntax" "definitionwith-handlers")
("not-break-exn?" "(not-break-exn? v)" "definitionnot-break-exn?")
("exn?" "(exn? v)" "definitionexn?")
("make-exn" "(make-exn message-immutable-string continuation-marks-mark-set)" "definitionmake-exn")
("struct:exn" "struct:exn" "definitionstruct:exn")
("exn-message" "(exn-message exn)" "definitionexn-message")
("exn-continuation-marks" "(exn-continuation-marks exn)" "definitionexn-continuation-marks")
("exn:user?" "(exn:user? v)" "definitionexn:user?")
("make-exn:user" "(make-exn:user message-immutable-string continuation-marks-mark-set)" "definitionmake-exn:user")
("struct:exn:user" "struct:exn:user" "definitionstruct:exn:user")
("exn:variable?" "(exn:variable? v)" "definitionexn:variable?")
("make-exn:variable" "(make-exn:variable message-immutable-string continuation-marks-mark-set id-symbol)" "definitionmake-exn:variable")
("struct:exn:variable" "struct:exn:variable" "definitionstruct:exn:variable")
("exn:variable-id" "(exn:variable-id exn)" "definitionexn:variable-id")
("exn:application?" "(exn:application? v)" "definitionexn:application?")
("make-exn:application" "(make-exn:application message-immutable-string continuation-marks-mark-set v)" "definitionmake-exn:application")
("struct:exn:application" "struct:exn:application" "definitionstruct:exn:application")
("exn:application-value" "(exn:application-value exn)" "definitionexn:application-value")
("exn:application:arity?" "(exn:application:arity? v)" "definitionexn:application:arity?")
("make-exn:application:arity" "(make-exn:application:arity message-immutable-string continuation-marks-mark-set v expected-arity)" "definitionmake-exn:application:arity")
("struct:exn:application:arity" "struct:exn:application:arity" "definitionstruct:exn:application:arity")
("exn:application:arity-expected" "(exn:application:arity-expected exn)" "definitionexn:application:arity-expected")
("exn:application:type?" "(exn:application:type? v)" "definitionexn:application:type?")
("make-exn:application:type" "(make-exn:application:type message-immutable-string continuation-marks-mark-set v expected-symbol)" "definitionmake-exn:application:type")
("struct:exn:application:type" "struct:exn:application:type" "definitionstruct:exn:application:type")
("exn:application:type-expected" "(exn:application:type-expected exn)" "definitionexn:application:type-expected")
("exn:application:mismatch?" "(exn:application:mismatch? v)" "definitionexn:application:mismatch?")
("make-exn:application:mismatch" "(make-exn:application:mismatch message-immutable-string continuation-marks-mark-set v)" "definitionmake-exn:application:mismatch")
("struct:exn:application:mismatch" "struct:exn:application:mismatch" "definitionstruct:exn:application:mismatch")
("exn:application:divide-by-zero?" "(exn:application:divide-by-zero? v)" "definitionexn:application:divide-by-zero?")
("make-exn:application:divide-by-zero" "(make-exn:application:divide-by-zero message-immutable-string continuation-marks-mark-set v)" "definitionmake-exn:application:divide-by-zero")
("struct:exn:application:divide-by-zero" "struct:exn:application:divide-by-zero" "definitionstruct:exn:application:divide-by-zero")
("exn:application:continuation?" "(exn:application:continuation? v)" "definitionexn:application:continuation?")
("make-exn:application:continuation" "(make-exn:application:continuation message-immutable-string continuation-marks-mark-set v)" "definitionmake-exn:application:continuation")
("struct:exn:application:continuation" "struct:exn:application:continuation" "definitionstruct:exn:application:continuation")
("exn:syntax?" "(exn:syntax? v)" "definitionexn:syntax?")
("make-exn:syntax" "(make-exn:syntax message-immutable-string continuation-marks-mark-set expr-syntax-object-or-#f form-symbol-or-#f module-symbol,-module-path-index,-or-#f)" "definitionmake-exn:syntax")
("struct:exn:syntax" "struct:exn:syntax" "definitionstruct:exn:syntax")
("exn:syntax-expr" "(exn:syntax-expr exn)" "definitionexn:syntax-expr")
("exn:syntax-form" "(exn:syntax-form exn)" "definitionexn:syntax-form")
("exn:syntax-module" "(exn:syntax-module exn)" "definitionexn:syntax-module")
("exn:read?" "(exn:read? v)" "definitionexn:read?")
("make-exn:read" "(make-exn:read message-immutable-string continuation-marks-mark-set source-v line-positive-exact-integer-or-#f column-non-negative-exact-integer-or-#f position-positive-exact-integer-or-#f span-non-negative-exact-integer-or-#f)" "definitionmake-exn:read")
("struct:exn:read" "struct:exn:read" "definitionstruct:exn:read")
("exn:read-source" "(exn:read-source exn)" "definitionexn:read-source")
("exn:read-line" "(exn:read-line exn)" "definitionexn:read-line")
("exn:read-column" "(exn:read-column exn)" "definitionexn:read-column")
("exn:read-position" "(exn:read-position exn)" "definitionexn:read-position")
("exn:read-span" "(exn:read-span exn)" "definitionexn:read-span")
("exn:read:eof?" "(exn:read:eof? v)" "definitionexn:read:eof?")
("make-exn:read:eof" "(make-exn:read:eof message-immutable-string continuation-marks-mark-set source-v line-positive-exact-integer-or-#f column-non-negative-exact-integer-or-#f position-positive-exact-integer-or-#f span-non-negative-exact-integer-or-#f)" "definitionmake-exn:read:eof")
("struct:exn:read:eof" "struct:exn:read:eof" "definitionstruct:exn:read:eof")
("exn:read:non-char?" "(exn:read:non-char? v)" "definitionexn:read:non-char?")
("make-exn:read:non-char" "(make-exn:read:non-char message-immutable-string continuation-marks-mark-set source-v line-positive-exact-integer-or-#f column-non-negative-exact-integer-or-#f position-positive-exact-integer-or-#f span-non-negative-exact-integer-or-#f)" "definitionmake-exn:read:non-char")
("struct:exn:read:non-char" "struct:exn:read:non-char" "definitionstruct:exn:read:non-char")
("exn:i/o?" "(exn:i/o? v)" "definitionexn:i/o?")
("make-exn:i/o" "(make-exn:i/o message-immutable-string continuation-marks-mark-set)" "definitionmake-exn:i/o")
("struct:exn:i/o" "struct:exn:i/o" "definitionstruct:exn:i/o")
("exn:i/o:port?" "(exn:i/o:port? v)" "definitionexn:i/o:port?")
("make-exn:i/o:port" "(make-exn:i/o:port message-immutable-string continuation-marks-mark-set port)" "definitionmake-exn:i/o:port")
("struct:exn:i/o:port" "struct:exn:i/o:port" "definitionstruct:exn:i/o:port")
("exn:i/o:port-port" "(exn:i/o:port-port exn)" "definitionexn:i/o:port-port")
("exn:i/o:port:read?" "(exn:i/o:port:read? v)" "definitionexn:i/o:port:read?")
("make-exn:i/o:port:read" "(make-exn:i/o:port:read message-immutable-string continuation-marks-mark-set port)" "definitionmake-exn:i/o:port:read")
("struct:exn:i/o:port:read" "struct:exn:i/o:port:read" "definitionstruct:exn:i/o:port:read")
("exn:i/o:port:write?" "(exn:i/o:port:write? v)" "definitionexn:i/o:port:write?")
("make-exn:i/o:port:write" "(make-exn:i/o:port:write message-immutable-string continuation-marks-mark-set port)" "definitionmake-exn:i/o:port:write")
("struct:exn:i/o:port:write" "struct:exn:i/o:port:write" "definitionstruct:exn:i/o:port:write")
("exn:i/o:port:closed?" "(exn:i/o:port:closed? v)" "definitionexn:i/o:port:closed?")
("make-exn:i/o:port:closed" "(make-exn:i/o:port:closed message-immutable-string continuation-marks-mark-set port)" "definitionmake-exn:i/o:port:closed")
("struct:exn:i/o:port:closed" "struct:exn:i/o:port:closed" "definitionstruct:exn:i/o:port:closed")
("exn:i/o:filesystem?" "(exn:i/o:filesystem? v)" "definitionexn:i/o:filesystem?")
("make-exn:i/o:filesystem" "(make-exn:i/o:filesystem message-immutable-string continuation-marks-mark-set pathname-path detail-symbol-or-#f)" "definitionmake-exn:i/o:filesystem")
("struct:exn:i/o:filesystem" "struct:exn:i/o:filesystem" "definitionstruct:exn:i/o:filesystem")
("exn:i/o:filesystem-pathname" "(exn:i/o:filesystem-pathname exn)" "definitionexn:i/o:filesystem-pathname")
("exn:i/o:filesystem-detail" "(exn:i/o:filesystem-detail exn)" "definitionexn:i/o:filesystem-detail")
("exn:i/o:tcp?" "(exn:i/o:tcp? v)" "definitionexn:i/o:tcp?")
("make-exn:i/o:tcp" "(make-exn:i/o:tcp message-immutable-string continuation-marks-mark-set)" "definitionmake-exn:i/o:tcp")
("struct:exn:i/o:tcp" "struct:exn:i/o:tcp" "definitionstruct:exn:i/o:tcp")
("exn:i/o:udp?" "(exn:i/o:udp? v)" "definitionexn:i/o:udp?")
("make-exn:i/o:udp" "(make-exn:i/o:udp message-immutable-string continuation-marks-mark-set)" "definitionmake-exn:i/o:udp")
("struct:exn:i/o:udp" "struct:exn:i/o:udp" "definitionstruct:exn:i/o:udp")
("exn:thread?" "(exn:thread? v)" "definitionexn:thread?")
("make-exn:thread" "(make-exn:thread message-immutable-string continuation-marks-mark-set)" "definitionmake-exn:thread")
("struct:exn:thread" "struct:exn:thread" "definitionstruct:exn:thread")
("exn:module?" "(exn:module? v)" "definitionexn:module?")
("make-exn:module" "(make-exn:module message-immutable-string continuation-marks-mark-set)" "definitionmake-exn:module")
("struct:exn:module" "struct:exn:module" "definitionstruct:exn:module")
("exn:break?" "(exn:break? v)" "definitionexn:break?")
("make-exn:break" "(make-exn:break message-immutable-string continuation-marks-mark-set continuation-continuation)" "definitionmake-exn:break")
("struct:exn:break" "struct:exn:break" "definitionstruct:exn:break")
("exn:break-continuation" "(exn:break-continuation exn)" "definitionexn:break-continuation")
("exn:special-comment?" "(exn:special-comment? v)" "definitionexn:special-comment?")
("make-exn:special-comment" "(make-exn:special-comment message-immutable-string continuation-marks-mark-set width-non-negative-exact-integer)" "definitionmake-exn:special-comment")
("struct:exn:special-comment" "struct:exn:special-comment" "definitionstruct:exn:special-comment")
("exn:special-comment-width" "(exn:special-comment-width exn)" "definitionexn:special-comment-width")
("exn:misc?" "(exn:misc? v)" "definitionexn:misc?")
("make-exn:misc" "(make-exn:misc message-immutable-string continuation-marks-mark-set)" "definitionmake-exn:misc")
("struct:exn:misc" "struct:exn:misc" "definitionstruct:exn:misc")
("exn:misc:unsupported?" "(exn:misc:unsupported? v)" "definitionexn:misc:unsupported?")
("make-exn:misc:unsupported" "(make-exn:misc:unsupported message-immutable-string continuation-marks-mark-set)" "definitionmake-exn:misc:unsupported")
("struct:exn:misc:unsupported" "struct:exn:misc:unsupported" "definitionstruct:exn:misc:unsupported")
("exn:misc:out-of-memory?" "(exn:misc:out-of-memory? v)" "definitionexn:misc:out-of-memory?")
("make-exn:misc:out-of-memory" "(make-exn:misc:out-of-memory message-immutable-string continuation-marks-mark-set)" "definitionmake-exn:misc:out-of-memory")
("struct:exn:misc:out-of-memory" "struct:exn:misc:out-of-memory" "definitionstruct:exn:misc:out-of-memory")
("error" "(error symbol)" "definitionerror")
("error" "(error msg-string v ...)" "definitionerror")
("error" "(error src-symbol format-string v ...)" "definitionerror")
("raise-type-error" "(raise-type-error name-symbol expected-string v)" "definitionraise-type-error")
("raise-type-error" "(raise-type-error name-symbol expected-string bad-k v)" "definitionraise-type-error")
("raise-mismatch-error" "(raise-mismatch-error name-symbol message-string v)" "definitionraise-mismatch-error")
("raise-syntax-error" "(raise-syntax-error name message-string [expr sub-expr])" "definitionraise-syntax-error")
("object-name" "(object-name v)" "definitionobject-name")
("call/cc" "call/cc" "definitioncall/cc")
("let/cc" "let/cc syntax" "definitionlet/cc")
("call-with-escape-continuation" "call-with-escape-continuation" "definitioncall-with-escape-continuation")
("call/ec" "call/ec" "definitioncall/ec")
("let/ec" "let/ec syntax" "definitionlet/ec")
("dynamic-wind" "(dynamic-wind pre-thunk value-thunk post-thunk)" "definitiondynamic-wind")
("with-continuation-mark" "with-continuation-mark syntax" "definitionwith-continuation-mark")
("continuation-marks" "(continuation-marks cont)" "definitioncontinuation-marks")
("current-continuation-marks" "(current-continuation-marks)" "definitioncurrent-continuation-marks")
("continuation-mark-set->list" "(continuation-mark-set->list mark-set key-v [skip-v])" "definitioncontinuation-mark-set->list")
("continuation-mark-set?" "(continuation-mark-set? v)" "definitioncontinuation-mark-set?")
("thread" "(thread thunk)" "definitionthread")
("thread-suspend" "(thread-suspend thread)" "definitionthread-suspend")
("thread-resume" "(thread-resume thread [thread-or-custodian])" "definitionthread-resume")
("kill-thread" "(kill-thread thread)" "definitionkill-thread")
("thread/suspend-to-kill" "(thread/suspend-to-kill thunk)" "definitionthread/suspend-to-kill")
("thread-wait" "(thread-wait thread)" "definitionthread-wait")
("thread-dead-waitable" "(thread-dead-waitable thread)" "definitionthread-dead-waitable")
("thread-resume-waitable" "(thread-resume-waitable thread)" "definitionthread-resume-waitable")
("thread-suspend-waitable" "(thread-suspend-waitable thread)" "definitionthread-suspend-waitable")
("current-thread" "(current-thread)" "definitioncurrent-thread")
("thread?" "(thread? v)" "definitionthread?")
("sleep" "(sleep [x])" "definitionsleep")
("thread-running?" "(thread-running? thread)" "definitionthread-running?")
("thread-dead?" "(thread-dead? thread)" "definitionthread-dead?")
("break-thread" "(break-thread thread)" "definitionbreak-thread")
("call-in-nested-thread" "(call-in-nested-thread thunk [custodian])" "definitioncall-in-nested-thread")
("make-semaphore" "(make-semaphore [init-k])" "definitionmake-semaphore")
("semaphore?" "(semaphore? v)" "definitionsemaphore?")
("semaphore-post" "(semaphore-post sema)" "definitionsemaphore-post")
("semaphore-wait" "(semaphore-wait sema)" "definitionsemaphore-wait")
("semaphore-try-wait?" "(semaphore-try-wait? sema)" "definitionsemaphore-try-wait?")
("semaphore-wait/enable-break" "(semaphore-wait/enable-break sema)" "definitionsemaphore-wait/enable-break")
("make-semaphore-peek" "(make-semaphore-peek sema)" "definitionmake-semaphore-peek")
("make-channel" "(make-channel)" "definitionmake-channel")
("channel?" "(channel? v)" "definitionchannel?")
("channel-get" "(channel-get channel)" "definitionchannel-get")
("channel-try-get" "(channel-try-get channel)" "definitionchannel-try-get")
("channel-put" "(channel-put channel v)" "definitionchannel-put")
("make-channel-put-waitable" "(make-channel-put-waitable channel v)" "definitionmake-channel-put-waitable")
("object-wait-multiple" "(object-wait-multiple timeout waitable ...1)" "definitionobject-wait-multiple")
("object-wait-multiple/enable-break" "(object-wait-multiple/enable-break timeout waitable ...1)" "definitionobject-wait-multiple/enable-break")
("waitables->waitable-set" "(waitables->waitable-set waitable ...)" "definitionwaitables->waitable-set")
("make-wrapped-waitable" "(make-wrapped-waitable waitable convert-proc)" "definitionmake-wrapped-waitable")
("make-guard-waitable" "(make-guard-waitable generator-thunk)" "definitionmake-guard-waitable")
("make-nack-guard-waitable" "(make-nack-guard-waitable generator-proc)" "definitionmake-nack-guard-waitable")
("make-poll-guard-waitable" "(make-poll-guard-waitable generator-proc)" "definitionmake-poll-guard-waitable")
("object-waitable?" "(object-waitable? v)" "definitionobject-waitable?")
("current-directory" "(current-directory [path])" "definitioncurrent-directory")
("current-input-port" "(current-input-port [input-port])" "definitioncurrent-input-port")
("current-output-port" "(current-output-port [output-port])" "definitioncurrent-output-port")
("current-error-port" "(current-error-port [output-port])" "definitioncurrent-error-port")
("global-port-print-handler" "(global-port-print-handler [proc])" "definitionglobal-port-print-handler")
("port-count-lines-enabled" "(port-count-lines-enabled [on?])" "definitionport-count-lines-enabled")
("read-case-sensitive" "(read-case-sensitive [on?])" "definitionread-case-sensitive")
("read-square-bracket-as-paren" "(read-square-bracket-as-paren [on?])" "definitionread-square-bracket-as-paren")
("read-curly-brace-as-paren" "(read-curly-brace-as-paren [on?])" "definitionread-curly-brace-as-paren")
("read-accept-box" "(read-accept-box [on?])" "definitionread-accept-box")
("read-accept-compiled" "(read-accept-compiled [on?])" "definitionread-accept-compiled")
("read-accept-bar-quote" "(read-accept-bar-quote [on?])" "definitionread-accept-bar-quote")
("read-accept-graph" "(read-accept-graph [on?])" "definitionread-accept-graph")
("read-decimal-as-inexact" "(read-decimal-as-inexact [on?])" "definitionread-decimal-as-inexact")
("read-accept-dot" "(read-accept-dot [on?])" "definitionread-accept-dot")
("read-accept-quasiquote" "(read-accept-quasiquote [on?])" "definitionread-accept-quasiquote")
("print-graph" "(print-graph [on?])" "definitionprint-graph")
("print-struct" "(print-struct [on?])" "definitionprint-struct")
("print-box" "(print-box [on?])" "definitionprint-box")
("print-vector-length" "(print-vector-length [on?])" "definitionprint-vector-length")
("print-hash-table" "(print-hash-table [on?])" "definitionprint-hash-table")
("current-prompt-read" "(current-prompt-read [proc])" "definitioncurrent-prompt-read")
("current-eval" "(current-eval [proc])" "definitioncurrent-eval")
("current-namespace" "(current-namespace [namespace])" "definitioncurrent-namespace")
("current-print" "(current-print [proc])" "definitioncurrent-print")
("compile-allow-set!-undefined" "(compile-allow-set!-undefined [on?])" "definitioncompile-allow-set!-undefined")
("current-load" "(current-load [proc])" "definitioncurrent-load")
("current-load-extension" "(current-load-extension [proc])" "definitioncurrent-load-extension")
("current-load/use-compiled" "(current-load/use-compiled [proc])" "definitioncurrent-load/use-compiled")
("current-load-relative-directory" "(current-load-relative-directory [path])" "definitioncurrent-load-relative-directory")
("use-compiled-file-kinds" "(use-compiled-file-kinds [kind-symbol])" "definitionuse-compiled-file-kinds")
("current-library-collection-paths" "(current-library-collection-paths [path-list])" "definitioncurrent-library-collection-paths")
("current-command-line-arguments" "(current-command-line-arguments [string-vector])" "definitioncurrent-command-line-arguments")
("current-exception-handler" "(current-exception-handler [proc])" "definitioncurrent-exception-handler")
("initial-exception-handler" "(initial-exception-handler [proc])" "definitioninitial-exception-handler")
("error-escape-handler" "(error-escape-handler [proc])" "definitionerror-escape-handler")
("error-display-handler" "(error-display-handler [proc])" "definitionerror-display-handler")
("error-print-width" "(error-print-width [k])" "definitionerror-print-width")
("error-value->string-handler" "(error-value->string-handler [proc])" "definitionerror-value->string-handler")
("error-print-source-location" "(error-print-source-location [include?])" "definitionerror-print-source-location")
("break-enabled" "(break-enabled [enabled?])" "definitionbreak-enabled")
("current-security-guard" "(current-security-guard [security-guard])" "definitioncurrent-security-guard")
("current-custodian" "(current-custodian [custodian])" "definitioncurrent-custodian")
("current-thread-group" "(current-thread-group [thread-group])" "definitioncurrent-thread-group")
("current-inspector" "(current-inspector [inspector])" "definitioncurrent-inspector")
("exit-handler" "(exit-handler [proc])" "definitionexit-handler")
("current-pseudo-random-generator" "(current-pseudo-random-generator [generator])" "definitioncurrent-pseudo-random-generator")
("current-wait-pseudo-random-generator" "(current-wait-pseudo-random-generator [generator])" "definitioncurrent-wait-pseudo-random-generator")
("current-locale" "(current-locale [string-or-\\#f])" "definitioncurrent-locale")
("current-module-name-resolver" "(current-module-name-resolver [proc])" "definitioncurrent-module-name-resolver")
("current-module-name-prefix" "(current-module-name-prefix [symbol])" "definitioncurrent-module-name-prefix")
("make-parameter" "(make-parameter v [guard-proc])" "definitionmake-parameter")
("parameter?" "(parameter? v)" "definitionparameter?")
("parameter-procedure=?" "(parameter-procedure=? a b)" "definitionparameter-procedure=?")
("parameterize" "parameterize syntax" "definitionparameterize")
("check-parameter-procedure" "(check-parameter-procedure v)" "definitioncheck-parameter-procedure")
("make-namespace" "(make-namespace [flag-symbol])" "definitionmake-namespace")
("namespace?" "(namespace? v)" "definitionnamespace?")
("namespace-symbol->identifier" "(namespace-symbol->identifier symbol)" "definitionnamespace-symbol->identifier")
("namespace-variable-value" "(namespace-variable-value symbol [use-mapping?\\ failure-thunk])" "definitionnamespace-variable-value")
("namespace-set-variable-value!" "(namespace-set-variable-value! symbol v [map?])" "definitionnamespace-set-variable-value!")
("namespace-undefine-variable!" "(namespace-undefine-variable! symbol)" "definitionnamespace-undefine-variable!")
("namespace-mapped-symbols" "(namespace-mapped-symbols)" "definitionnamespace-mapped-symbols")
("namespace-require" "(namespace-require quoted-require-spec)" "definitionnamespace-require")
("namespace-transformer-require" "(namespace-transformer-require quoted-require-spec)" "definitionnamespace-transformer-require")
("namespace-require/copy" "(namespace-require/copy quoted-require-spec)" "definitionnamespace-require/copy")
("namespace-require/expansion-time" "(namespace-require/expansion-time quoted-require-spec)" "definitionnamespace-require/expansion-time")
("namespace-attach-module" "(namespace-attach-module src-namespace module-symbol)" "definitionnamespace-attach-module")
("namespace-module-registry" "(namespace-module-registry namespace)" "definitionnamespace-module-registry")
("module->namespace" "(module->namespace module-path-v)" "definitionmodule->namespace")
("namespace-syntax-introduce" "(namespace-syntax-introduce stx)" "definitionnamespace-syntax-introduce")
("make-security-guard" "(make-security-guard parent-security-guard file-proc network-proc)" "definitionmake-security-guard")
("security-guard?" "(security-guard? v)" "definitionsecurity-guard?")
("make-custodian" "(make-custodian [custodian])" "definitionmake-custodian")
("custodian-shutdown-all" "(custodian-shutdown-all custodian)" "definitioncustodian-shutdown-all")
("custodian?" "(custodian? v)" "definitioncustodian?")
("custodian-managed-list" "(custodian-managed-list custodian super-custodian)" "definitioncustodian-managed-list")
("custodian-require-memory" "(custodian-require-memory need-k custodian)" "definitioncustodian-require-memory")
("custodian-limit-memory" "(custodian-limit-memory custodian limit-k custodian)" "definitioncustodian-limit-memory")
("make-thread-group" "(make-thread-group [thread-group])" "definitionmake-thread-group")
("thread-group?" "(thread-group? v)" "definitionthread-group?")
("regexp" "(regexp string)" "definitionregexp")
("regexp?" "(regexp? v)" "definitionregexp?")
("regexp-match" "(regexp-match pattern string [start-k end-k output-port])" "definitionregexp-match")
("regexp-match" "(regexp-match pattern input-port [start-k end-k output-port])" "definitionregexp-match")
("regexp-match-positions" "(regexp-match-positions pattern string-or-input-port [start-k end-k output-port])" "definitionregexp-match-positions")
("regexp-match-peek" "(regexp-match-peek pattern input-port [start-k end-k])" "definitionregexp-match-peek")
("regexp-match-peek-positions" "(regexp-match-peek-positions pattern input-port [start-k end-k])" "definitionregexp-match-peek-positions")
("regexp-replace" "(regexp-replace pattern string insert-string)" "definitionregexp-replace")
("regexp-replace*" "(regexp-replace* pattern string insert-string)" "definitionregexp-replace*")
("make-pipe" "(make-pipe [limit-k])" "definitionmake-pipe")
("open-input-string" "(open-input-string string)" "definitionopen-input-string")
("open-output-string" "(open-output-string)" "definitionopen-output-string")
("get-output-string" "(get-output-string string-output-port)" "definitionget-output-string")
("file-stream-port?" "(file-stream-port? port)" "definitionfile-stream-port?")
("flush-output" "(flush-output [output-port])" "definitionflush-output")
("file-stream-buffer-mode" "(file-stream-buffer-mode file-stream-output-port [mode-symbol])" "definitionfile-stream-buffer-mode")
("file-position" "(file-position port)" "definitionfile-position")
("file-position" "(file-position port k)" "definitionfile-position")
("port-file-identity" "(port-file-identity file-stream-port)" "definitionport-file-identity")
("make-custom-input-port" "(make-custom-input-port read-string-proc\n peek-string-proc-or-false close-proc)" "definitionmake-custom-input-port")
("make-custom-output-port" "(make-custom-output-port waitable-or-false write-string-proc flush-proc close-proc)" "definitionmake-custom-output-port")
("read-line" "(read-line [input-port mode-symbol])" "definitionread-line")
("read-string" "(read-string k [input-port])" "definitionread-string")
("read-string-avail!" "(read-string-avail! string [input-port start-k end-k])" "definitionread-string-avail!")
("read-string-avail!*" "(read-string-avail!* string [input-port start-k end-k])" "definitionread-string-avail!*")
("read-string-avail!/enable-break" "(read-string-avail!/enable-break string [input-port\n start-k end-k])" "definitionread-string-avail!/enable-break")
("peek-string" "(peek-string k skip-k [input-port])" "definitionpeek-string")
("peek-string-avail!" "(peek-string-avail! string skip-k [input-port start-k\n end-k])" "definitionpeek-string-avail!")
("peek-string-avail!*" "(peek-string-avail!* string skip-k [input-port start-k\n end-k])" "definitionpeek-string-avail!*")
("peek-string-avail!/enable-break" "(peek-string-avail!/enable-break string skip-k [input-port start-k end-k])" "definitionpeek-string-avail!/enable-break")
("read-char-or-special" "(read-char-or-special input-port)" "definitionread-char-or-special")
("peek-char" "(peek-char input-port [skip-k])" "definitionpeek-char")
("peek-char-or-special" "(peek-char-or-special input-port [skip-k])" "definitionpeek-char-or-special")
("print" "(print v [output-port])" "definitionprint")
("write-string-avail" "(write-string-avail string [output-port start-k end-k])" "definitionwrite-string-avail")
("write-string-avail*" "(write-string-avail* string [output-port start-k end-k])" "definitionwrite-string-avail*")
("write-string-avail/enable-break" "(write-string-avail/enable-break string [input-port\n start-k end-k])" "definitionwrite-string-avail/enable-break")
("fprintf" "(fprintf output-port format-string v ...)" "definitionfprintf")
("printf" "(printf format-string v ...)" "definitionprintf")
("format" "(format format-string v ...)" "definitionformat")
("port-count-lines!" "(port-count-lines! input-port)" "definitionport-count-lines!")
("port-next-location" "(port-next-location input-port)" "definitionport-next-location")
("port-read-handler" "(port-read-handler input-port)" "definitionport-read-handler")
("port-read-handler" "(port-read-handler input-port proc)" "definitionport-read-handler")
("port-display-handler" "(port-display-handler output-port)" "definitionport-display-handler")
("port-display-handler" "(port-display-handler output-port proc)" "definitionport-display-handler")
("port-write-handler" "(port-write-handler output-port)" "definitionport-write-handler")
("port-write-handler" "(port-write-handler output-port proc)" "definitionport-write-handler")
("port-print-handler" "(port-print-handler output-port)" "definitionport-print-handler")
("port-print-handler" "(port-print-handler output-port proc)" "definitionport-print-handler")
("build-path" "(build-path base-path sub-path ...)" "definitionbuild-path")
("absolute-path?" "(absolute-path? path)" "definitionabsolute-path?")
("relative-path?" "(relative-path? path)" "definitionrelative-path?")
("complete-path?" "(complete-path? path)" "definitioncomplete-path?")
("path->complete-path" "(path->complete-path path [base-path])" "definitionpath->complete-path")
("resolve-path" "(resolve-path path)" "definitionresolve-path")
("expand-path" "(expand-path path)" "definitionexpand-path")
("simplify-path" "(simplify-path path)" "definitionsimplify-path")
("normal-case-path" "(normal-case-path string)" "definitionnormal-case-path")
("split-path" "(split-path path)" "definitionsplit-path")
("find-executable-path" "(find-executable-path program-sub-path related-sub-path)" "definitionfind-executable-path")
("find-system-path" "(find-system-path kind-symbol)" "definitionfind-system-path")
("path-list-string->path-list" "(path-list-string->path-list string default-path-list)" "definitionpath-list-string->path-list")
("file-exists?" "(file-exists? path)" "definitionfile-exists?")
("link-exists?" "(link-exists? path)" "definitionlink-exists?")
("delete-file" "(delete-file path)" "definitiondelete-file")
("rename-file-or-directory" "(rename-file-or-directory old-path new-path [exists-ok?])" "definitionrename-file-or-directory")
("file-or-directory-modify-seconds" "(file-or-directory-modify-seconds path [secs-n])" "definitionfile-or-directory-modify-seconds")
("file-or-directory-permissions" "(file-or-directory-permissions path)" "definitionfile-or-directory-permissions")
("file-size" "(file-size path)" "definitionfile-size")
("copy-file" "(copy-file src-path dest-path)" "definitioncopy-file")
("make-file-or-directory-link" "(make-file-or-directory-link to-path path)" "definitionmake-file-or-directory-link")
("current-drive" "(current-drive)" "definitioncurrent-drive")
("directory-exists?" "(directory-exists? path)" "definitiondirectory-exists?")
("make-directory" "(make-directory path)" "definitionmake-directory")
("delete-directory" "(delete-directory path)" "definitiondelete-directory")
("directory-list" "(directory-list [path])" "definitiondirectory-list")
("filesystem-root-list" "(filesystem-root-list)" "definitionfilesystem-root-list")
("tcp-listen" "(tcp-listen port-k [max-allow-wait-k reuse? hostname-string-or-false])" "definitiontcp-listen")
("tcp-connect" "(tcp-connect hostname-string port-k)" "definitiontcp-connect")
("tcp-connect/enable-break" "(tcp-connect/enable-break hostname-string port-k)" "definitiontcp-connect/enable-break")
("tcp-accept" "(tcp-accept tcp-listener)" "definitiontcp-accept")
("tcp-accept-ready?" "(tcp-accept-ready? tcp-listener)" "definitiontcp-accept-ready?")
("tcp-accept/enable-break" "(tcp-accept/enable-break tcp-listener)" "definitiontcp-accept/enable-break")
("tcp-close" "(tcp-close tcp-listener)" "definitiontcp-close")
("tcp-listener?" "(tcp-listener? v)" "definitiontcp-listener?")
("tcp-abandon-port" "(tcp-abandon-port tcp-port)" "definitiontcp-abandon-port")
("tcp-addresses" "(tcp-addresses tcp-port)" "definitiontcp-addresses")
("tcp-port?" "(tcp-port? v)" "definitiontcp-port?")
("udp-open-socket" "(udp-open-socket)" "definitionudp-open-socket")
("udp-bind!" "(udp-bind! udp-socket hostname-string-or-false port-k)" "definitionudp-bind!")
("udp-connect!" "(udp-connect! udp-socket hostname-string-or-false\n port-k-or-false)" "definitionudp-connect!")
("udp-send-to" "(udp-send-to udp-socket hostname-address port-k\n string [start-k end-k])" "definitionudp-send-to")
("udp-send" "(udp-send udp-socket string [start-k end-k])" "definitionudp-send")
("udp-send-to*" "(udp-send-to* udp-socket hostname-address port-k\n string [start-k end-k])" "definitionudp-send-to*")
("udp-send*" "(udp-send* udp-socket string [start-k end-k])" "definitionudp-send*")
("udp-send-to/enable-break" "(udp-send-to/enable-break udp-socket hostname-address\n port-k string [start-k end-k])" "definitionudp-send-to/enable-break")
("udp-send/enable-break" "(udp-send/enable-break udp-socket string [start-k end-k])" "definitionudp-send/enable-break")
("udp-receive!" "(udp-receive! udp-socket mutable-string [start-k end-k])" "definitionudp-receive!")
("udp-receive!*" "(udp-receive!* udp-socket mutable-string [start-k\n end-k])" "definitionudp-receive!*")
("udp-receive!/enable-break" "(udp-receive!/enable-break udp-socket\n mutable-string [start-k end-k])" "definitionudp-receive!/enable-break")
("udp-close" "(udp-close udp-socket)" "definitionudp-close")
("udp?" "(udp? v)" "definitionudp?")
("udp-bound?" "(udp-bound? udp-socket)" "definitionudp-bound?")
("udp-connected?" "(udp-connected? udp-socket)" "definitionudp-connected?")
("udp->send-waitable" "(udp->send-waitable udp-socket)" "definitionudp->send-waitable")
("udp->receive-waitable" "(udp->receive-waitable udp-socket)" "definitionudp->receive-waitable")
("syntax-id-rules" "syntax-id-rules keyword" "definitionsyntax-id-rules")
("syntax-id-rules" "syntax-id-rules keyword" "definitionsyntax-id-rules")
("read-syntax" "(read-syntax source-name-v [input-port offset-list])" "definitionread-syntax")
("quote-syntax" "quote-syntax syntax" "definitionquote-syntax")
("syntax-case" "syntax-case syntax" "definitionsyntax-case")
("syntax" "syntax syntax" "definitionsyntax")
("syntax-case*" "syntax-case* syntax" "definitionsyntax-case*")
("with-syntax" "with-syntax syntax" "definitionwith-syntax")
("quasisyntax" "quasisyntax syntax" "definitionquasisyntax")
("unsyntax" "unsyntax syntax" "definitionunsyntax")
("unsyntax-splicing" "unsyntax-splicing syntax" "definitionunsyntax-splicing")
("syntax/loc" "syntax/loc syntax" "definitionsyntax/loc")
("quasisyntax/loc" "quasisyntax/loc syntax" "definitionquasisyntax/loc")
("syntax?" "(syntax? v)" "definitionsyntax?")
("syntax-source" "(syntax-source stx)" "definitionsyntax-source")
("syntax-line" "(syntax-line stx)" "definitionsyntax-line")
("syntax-column" "(syntax-column stx)" "definitionsyntax-column")
("syntax-position" "(syntax-position stx)" "definitionsyntax-position")
("syntax-span" "(syntax-span stx)" "definitionsyntax-span")
("syntax-original?" "(syntax-original? stx)" "definitionsyntax-original?")
("syntax-source-module" "(syntax-source-module stx)" "definitionsyntax-source-module")
("syntax-e" "(syntax-e stx)" "definitionsyntax-e")
("syntax->list" "(syntax->list stx)" "definitionsyntax->list")
("syntax-object->datum" "(syntax-object->datum stx)" "definitionsyntax-object->datum")
("datum->syntax-object" "(datum->syntax-object ctxt-stx v [src-stx-or-list prop-stx])" "definitiondatum->syntax-object")
("syntax-graph?" "(syntax-graph? stx)" "definitionsyntax-graph?")
("identifier?" "(identifier? v)" "definitionidentifier?")
("generate-temporaries" "(generate-temporaries stx-pair)" "definitiongenerate-temporaries")
("bound-identifier=?" "(bound-identifier=? a-id-stx b-id-stx)" "definitionbound-identifier=?")
("free-identifier=?" "(free-identifier=? a-id-stx b-id-stx)" "definitionfree-identifier=?")
("module-identifier=?" "(module-identifier=? a-id-stx b-id-stx)" "definitionmodule-identifier=?")
("module-transformer-identifier=?" "(module-transformer-identifier=? a-id-stx b-id-stx)" "definitionmodule-transformer-identifier=?")
("check-duplicate-identifier" "(check-duplicate-identifier id-stx-list)" "definitioncheck-duplicate-identifier")
("identifier-binding" "(identifier-binding id-stx)" "definitionidentifier-binding")
("identifier-transformer-binding" "(identifier-transformer-binding id-stx)" "definitionidentifier-transformer-binding")
("identifier-binding-export-position" "(identifier-binding-export-position id-stx)" "definitionidentifier-binding-export-position")
("identifier-transformer-binding-export-position" "(identifier-transformer-binding-export-position id-stx)" "definitionidentifier-transformer-binding-export-position")
("require-for-syntax" "require-for-syntax syntax" "definitionrequire-for-syntax")
("define-syntaxes" "define-syntaxes syntax" "definitiondefine-syntaxes")
("let-syntaxes" "let-syntaxes syntax" "definitionlet-syntaxes")
("letrec-syntaxes" "letrec-syntaxes syntax" "definitionletrec-syntaxes")
("letrec-syntaxes+values" "letrec-syntaxes+values syntax" "definitionletrec-syntaxes+values")
("fluid-let-syntax" "fluid-let-syntax syntax" "definitionfluid-let-syntax")
("make-set!-transformer" "(make-set!-transformer proc)" "definitionmake-set!-transformer")
("set!-transformer?" "(set!-transformer? v)" "definitionset!-transformer?")
("make-rename-transformer" "(make-rename-transformer id-stx)" "definitionmake-rename-transformer")
("rename-transformer?" "(rename-transformer? v)" "definitionrename-transformer?")
("syntax-local-value" "(syntax-local-value id-stx [failure-thunk])" "definitionsyntax-local-value")
("syntax-local-name" "(syntax-local-name)" "definitionsyntax-local-name")
("syntax-local-context" "(syntax-local-context)" "definitionsyntax-local-context")
("syntax-local-get-shadower" "(syntax-local-get-shadower identifier)" "definitionsyntax-local-get-shadower")
("syntax-local-module-introduce" "(syntax-local-module-introduce stx)" "definitionsyntax-local-module-introduce")
("local-expand" "(local-expand stx context-v stop-id-stx-list)" "definitionlocal-expand")
("syntax-local-introduce" "(syntax-local-introduce stx)" "definitionsyntax-local-introduce")
("make-syntax-introducer" "(make-syntax-introducer)" "definitionmake-syntax-introducer")
("expand" "(expand stx-or-sexpr)" "definitionexpand")
("expand-syntax" "(expand-syntax stx)" "definitionexpand-syntax")
("expand-once" "(expand-once stx-or-sexpr)" "definitionexpand-once")
("expand-syntax-once" "(expand-syntax-once stx)" "definitionexpand-syntax-once")
("expand-to-top-form" "(expand-to-top-form stx-or-sexpr)" "definitionexpand-to-top-form")
("expand-syntax-to-top-form" "(expand-syntax-to-top-form stx)" "definitionexpand-syntax-to-top-form")
("syntax-property" "(syntax-property stx key-v v)" "definitionsyntax-property")
("syntax-property" "(syntax-property stx key-v)" "definitionsyntax-property")
("syntax-track-origin" "(syntax-track-origin new-stx orig-stx id-stx)" "definitionsyntax-track-origin")
("module-path-index?" "(module-path-index? v)" "definitionmodule-path-index?")
("module-path-index-split" "(module-path-index-split module-path-index)" "definitionmodule-path-index-split")
("module-path-index-join" "(module-path-index-join module-path module-path-index)" "definitionmodule-path-index-join")
("compiled-module-expression?" "(compiled-module-expression? v)" "definitioncompiled-module-expression?")
("module-compiled-name" "(module-compiled-name compiled-module-code)" "definitionmodule-compiled-name")
("module-compiled-imports" "(module-compiled-imports compiled-module-code)" "definitionmodule-compiled-imports")
("make-weak-box" "(make-weak-box v)" "definitionmake-weak-box")
("weak-box-value" "(weak-box-value weak-box)" "definitionweak-box-value")
("weak-box?" "(weak-box? v)" "definitionweak-box?")
("make-will-executor" "(make-will-executor)" "definitionmake-will-executor")
("will-executor?" "(will-executor? v)" "definitionwill-executor?")
("will-register" "(will-register executor v proc)" "definitionwill-register")
("will-execute" "(will-execute executor)" "definitionwill-execute")
("will-try-execute" "(will-try-execute executor)" "definitionwill-try-execute")
("collect-garbage" "(collect-garbage)" "definitioncollect-garbage")
("current-memory-use" "(current-memory-use [custodian])" "definitioncurrent-memory-use")
("dump-memory-stats" "(dump-memory-stats)" "definitiondump-memory-stats")
("eval" "(eval expr)" "definitioneval")
("eval-syntax" "(eval-syntax stx)" "definitioneval-syntax")
("load" "(load file-path)" "definitionload")
("load-relative" "(load-relative file-path)" "definitionload-relative")
("load/use-compiled" "(load/use-compiled file-path)" "definitionload/use-compiled")
("load/cd" "(load/cd file-path)" "definitionload/cd")
("read-eval-print-loop" "(read-eval-print-loop)" "definitionread-eval-print-loop")
("exit" "(exit [v])" "definitionexit")
("compile" "(compile expr)" "definitioncompile")
("compile-syntax" "(compile-syntax stx)" "definitioncompile-syntax")
("compiled-expression?" "(compiled-expression? v)" "definitioncompiled-expression?")
("load-extension" "(load-extension file-path)" "definitionload-extension")
("write-image-to-file" "(write-image-to-file file-path [cont-proc])" "definitionwrite-image-to-file")
("read-image-from-file" "(read-image-from-file file-path arg-vector)" "definitionread-image-from-file")
("current-seconds" "(current-seconds)" "definitioncurrent-seconds")
("seconds->date" "(seconds->date secs-n)" "definitionseconds->date")
("current-milliseconds" "(current-milliseconds)" "definitioncurrent-milliseconds")
("current-inexact-milliseconds" "(current-inexact-milliseconds)" "definitioncurrent-inexact-milliseconds")
("current-process-milliseconds" "(current-process-milliseconds)" "definitioncurrent-process-milliseconds")
("current-gc-milliseconds" "(current-gc-milliseconds)" "definitioncurrent-gc-milliseconds")
("time-apply" "(time-apply proc arg-list)" "definitiontime-apply")
("time" "time syntax" "definitiontime")
("subprocess" "(subprocess stdout-output-port stdin-input-port\n stderr-output-port command-path arg-string ...)" "definitionsubprocess")
("subprocess-wait" "(subprocess-wait subprocess)" "definitionsubprocess-wait")
("subprocess-status" "(subprocess-status subprocess)" "definitionsubprocess-status")
("subprocess-kill" "(subprocess-kill subprocess force?)" "definitionsubprocess-kill")
("subprocess-pid" "(subprocess-pid subprocess)" "definitionsubprocess-pid")
("subprocess?" "(subprocess? v)" "definitionsubprocess?")
("shell-execute" "(shell-execute verb-string target-string parameters-string dir-path show-mode-symbol)" "definitionshell-execute")
("getenv" "(getenv name-string)" "definitiongetenv")
("putenv" "(putenv name-string value-string)" "definitionputenv")
("system-type" "(system-type [details?])" "definitionsystem-type")
("system-library-subpath" "(system-library-subpath [variant?])" "definitionsystem-library-subpath")
("version" "(version)" "definitionversion")
("banner" "(banner)" "definitionbanner")
("vector-set-performance-stats!" "(vector-set-performance-stats! mutable-vector [thread])" "definitionvector-set-performance-stats!")
("find-library-collection-paths" "(find-library-collection-paths)" "definitionfind-library-collection-paths")
("collection-path" "(collection-path collection ...1)" "definitioncollection-path")
