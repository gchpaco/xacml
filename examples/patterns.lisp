(in-package :pattern-matching)(defun pattern-match-p (pattern tree)  "Return T if PATTERN matches TREE, or NIL otherwise.Patterns work like this: atoms match atoms.  * is a wildcard matching any expression at all.** is a wildcard matching any number of any expressions at all.  So a pattern matching redudantANDs, say, might look like this:  (and ** (and **) **)and would match this tree:  (and x (and y z) (< z 6))but not this one:  (and x (or (and y z)) (< z 6))The values for any wildcards will be returned as an additional result after the T that denotes success."  (cond   ((eq pattern '*) (values t (list tree)))   ((eq pattern '**) (values t (list (list tree))))   ((or (atom pattern) (atom tree)) (equalp pattern tree))   (t (do* ((pattern-rest pattern)            (tree-rest tree)            (form (first pattern-rest) (first pattern-rest))            (node (first tree-rest) (first tree-rest))            (values '()))           ((or (endp pattern-rest)                (endp tree-rest))            (values (and (endp pattern-rest)                         (endp tree-rest))                    values))        (cond          ((eq form '**)          (when (endp (rest pattern-rest))      ; can't fail but to match everything            (return (values t (append values (list tree-rest)))))          (loop for subtree on tree-rest                and previous = nil then (cons (first subtree) previous)                do (multiple-value-bind (result others)                                         (pattern-match-p (rest pattern-rest)                                                         subtree)                     (when result                       (return-from pattern-match-p                          (values t (append values (list previous) others))))))          (return nil))         (t (multiple-value-bind (result others)                                 (pattern-match-p form node)              (unless result (return nil))              (setf pattern-rest (rest pattern-rest)                    tree-rest (rest tree-rest)                    values (append values others)))))))))